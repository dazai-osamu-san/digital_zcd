ARM GAS  /tmp/cccFkktC.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB261:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include "stdint.h"
  25:Core/Src/main.c **** #include "arm_math.h"
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END PTD */
ARM GAS  /tmp/cccFkktC.s 			page 2


  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** #define BUFFER_SIZE 2048
  36:Core/Src/main.c **** #define NUM_TAPS 311
  37:Core/Src/main.c **** #define FS 8000
  38:Core/Src/main.c **** uint16_t adcBuffer[BUFFER_SIZE];
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** static float32_t inputF32[BUFFER_SIZE];
  41:Core/Src/main.c **** static float32_t outputF32[BUFFER_SIZE];
  42:Core/Src/main.c **** static float32_t firStateF32[BUFFER_SIZE + NUM_TAPS - 1];
  43:Core/Src/main.c **** static float32_t fftOutput[BUFFER_SIZE];
  44:Core/Src/main.c **** static float32_t fftMag[BUFFER_SIZE / 2]; 
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** arm_fir_instance_f32 S;
  47:Core/Src/main.c **** arm_rfft_fast_instance_f32 S_RFFT;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** static float32_t firCoeffs32[NUM_TAPS] = {
  50:Core/Src/main.c ****     -0.000051,
  51:Core/Src/main.c ****     -0.000041,
  52:Core/Src/main.c ****     -0.000031,
  53:Core/Src/main.c ****     -0.000021,
  54:Core/Src/main.c ****     -0.000011,
  55:Core/Src/main.c ****     0.000000,
  56:Core/Src/main.c ****     0.000011,
  57:Core/Src/main.c ****     0.000023,
  58:Core/Src/main.c ****     0.000035,
  59:Core/Src/main.c ****     0.000047,
  60:Core/Src/main.c ****     0.000061,
  61:Core/Src/main.c ****     0.000074,
  62:Core/Src/main.c ****     0.000088,
  63:Core/Src/main.c ****     0.000103,
  64:Core/Src/main.c ****     0.000119,
  65:Core/Src/main.c ****     0.000135,
  66:Core/Src/main.c ****     0.000152,
  67:Core/Src/main.c ****     0.000169,
  68:Core/Src/main.c ****     0.000186,
  69:Core/Src/main.c ****     0.000205,
  70:Core/Src/main.c ****     0.000223,
  71:Core/Src/main.c ****     0.000242,
  72:Core/Src/main.c ****     0.000262,
  73:Core/Src/main.c ****     0.000281,
  74:Core/Src/main.c ****     0.000301,
  75:Core/Src/main.c ****     0.000320,
  76:Core/Src/main.c ****     0.000340,
  77:Core/Src/main.c ****     0.000359,
  78:Core/Src/main.c ****     0.000378,
  79:Core/Src/main.c ****     0.000396,
  80:Core/Src/main.c ****     0.000413,
  81:Core/Src/main.c ****     0.000429,
  82:Core/Src/main.c ****     0.000444,
  83:Core/Src/main.c ****     0.000458,
  84:Core/Src/main.c ****     0.000470,
  85:Core/Src/main.c ****     0.000481,
  86:Core/Src/main.c ****     0.000489,
  87:Core/Src/main.c ****     0.000496,
  88:Core/Src/main.c ****     0.000499,
ARM GAS  /tmp/cccFkktC.s 			page 3


  89:Core/Src/main.c ****     0.000500,
  90:Core/Src/main.c ****     0.000499,
  91:Core/Src/main.c ****     0.000494,
  92:Core/Src/main.c ****     0.000486,
  93:Core/Src/main.c ****     0.000474,
  94:Core/Src/main.c ****     0.000458,
  95:Core/Src/main.c ****     0.000439,
  96:Core/Src/main.c ****     0.000415,
  97:Core/Src/main.c ****     0.000388,
  98:Core/Src/main.c ****     0.000355,
  99:Core/Src/main.c ****     0.000319,
 100:Core/Src/main.c ****     0.000277,
 101:Core/Src/main.c ****     0.000231,
 102:Core/Src/main.c ****     0.000181,
 103:Core/Src/main.c ****     0.000125,
 104:Core/Src/main.c ****     0.000065,
 105:Core/Src/main.c ****     -0.000000,
 106:Core/Src/main.c ****     -0.000070,
 107:Core/Src/main.c ****     -0.000144,
 108:Core/Src/main.c ****     -0.000223,
 109:Core/Src/main.c ****     -0.000306,
 110:Core/Src/main.c ****     -0.000393,
 111:Core/Src/main.c ****     -0.000484,
 112:Core/Src/main.c ****     -0.000579,
 113:Core/Src/main.c ****     -0.000677,
 114:Core/Src/main.c ****     -0.000778,
 115:Core/Src/main.c ****     -0.000881,
 116:Core/Src/main.c ****     -0.000987,
 117:Core/Src/main.c ****     -0.001095,
 118:Core/Src/main.c ****     -0.001203,
 119:Core/Src/main.c ****     -0.001313,
 120:Core/Src/main.c ****     -0.001422,
 121:Core/Src/main.c ****     -0.001532,
 122:Core/Src/main.c ****     -0.001640,
 123:Core/Src/main.c ****     -0.001746,
 124:Core/Src/main.c ****     -0.001851,
 125:Core/Src/main.c ****     -0.001952,
 126:Core/Src/main.c ****     -0.002049,
 127:Core/Src/main.c ****     -0.002142,
 128:Core/Src/main.c ****     -0.002230,
 129:Core/Src/main.c ****     -0.002312,
 130:Core/Src/main.c ****     -0.002387,
 131:Core/Src/main.c ****     -0.002454,
 132:Core/Src/main.c ****     -0.002513,
 133:Core/Src/main.c ****     -0.002563,
 134:Core/Src/main.c ****     -0.002603,
 135:Core/Src/main.c ****     -0.002632,
 136:Core/Src/main.c ****     -0.002650,
 137:Core/Src/main.c ****     -0.002655,
 138:Core/Src/main.c ****     -0.002648,
 139:Core/Src/main.c ****     -0.002627,
 140:Core/Src/main.c ****     -0.002592,
 141:Core/Src/main.c ****     -0.002541,
 142:Core/Src/main.c ****     -0.002475,
 143:Core/Src/main.c ****     -0.002393,
 144:Core/Src/main.c ****     -0.002294,
 145:Core/Src/main.c ****     -0.002178,
ARM GAS  /tmp/cccFkktC.s 			page 4


 146:Core/Src/main.c ****     -0.002045,
 147:Core/Src/main.c ****     -0.001893,
 148:Core/Src/main.c ****     -0.001722,
 149:Core/Src/main.c ****     -0.001534,
 150:Core/Src/main.c ****     -0.001326,
 151:Core/Src/main.c ****     -0.001099,
 152:Core/Src/main.c ****     -0.000853,
 153:Core/Src/main.c ****     -0.000588,
 154:Core/Src/main.c ****     -0.000303,
 155:Core/Src/main.c ****     0.000000,
 156:Core/Src/main.c ****     0.000322,
 157:Core/Src/main.c ****     0.000663,
 158:Core/Src/main.c ****     0.001022,
 159:Core/Src/main.c ****     0.001399,
 160:Core/Src/main.c ****     0.001793,
 161:Core/Src/main.c ****     0.002204,
 162:Core/Src/main.c ****     0.002631,
 163:Core/Src/main.c ****     0.003073,
 164:Core/Src/main.c ****     0.003530,
 165:Core/Src/main.c ****     0.004001,
 166:Core/Src/main.c ****     0.004485,
 167:Core/Src/main.c ****     0.004981,
 168:Core/Src/main.c ****     0.005488,
 169:Core/Src/main.c ****     0.006004,
 170:Core/Src/main.c ****     0.006530,
 171:Core/Src/main.c ****     0.007063,
 172:Core/Src/main.c ****     0.007602,
 173:Core/Src/main.c ****     0.008146,
 174:Core/Src/main.c ****     0.008693,
 175:Core/Src/main.c ****     0.009243,
 176:Core/Src/main.c ****     0.009794,
 177:Core/Src/main.c ****     0.010344,
 178:Core/Src/main.c ****     0.010892,
 179:Core/Src/main.c ****     0.011436,
 180:Core/Src/main.c ****     0.011976,
 181:Core/Src/main.c ****     0.012509,
 182:Core/Src/main.c ****     0.013034,
 183:Core/Src/main.c ****     0.013550,
 184:Core/Src/main.c ****     0.014054,
 185:Core/Src/main.c ****     0.014547,
 186:Core/Src/main.c ****     0.015026,
 187:Core/Src/main.c ****     0.015489,
 188:Core/Src/main.c ****     0.015937,
 189:Core/Src/main.c ****     0.016366,
 190:Core/Src/main.c ****     0.016776,
 191:Core/Src/main.c ****     0.017167,
 192:Core/Src/main.c ****     0.017535,
 193:Core/Src/main.c ****     0.017881,
 194:Core/Src/main.c ****     0.018204,
 195:Core/Src/main.c ****     0.018501,
 196:Core/Src/main.c ****     0.018774,
 197:Core/Src/main.c ****     0.019020,
 198:Core/Src/main.c ****     0.019238,
 199:Core/Src/main.c ****     0.019429,
 200:Core/Src/main.c ****     0.019592,
 201:Core/Src/main.c ****     0.019726,
 202:Core/Src/main.c ****     0.019830,
ARM GAS  /tmp/cccFkktC.s 			page 5


 203:Core/Src/main.c ****     0.019905,
 204:Core/Src/main.c ****     0.019950,
 205:Core/Src/main.c ****     0.019965,
 206:Core/Src/main.c ****     0.019950,
 207:Core/Src/main.c ****     0.019905,
 208:Core/Src/main.c ****     0.019830,
 209:Core/Src/main.c ****     0.019726,
 210:Core/Src/main.c ****     0.019592,
 211:Core/Src/main.c ****     0.019429,
 212:Core/Src/main.c ****     0.019238,
 213:Core/Src/main.c ****     0.019020,
 214:Core/Src/main.c ****     0.018774,
 215:Core/Src/main.c ****     0.018501,
 216:Core/Src/main.c ****     0.018204,
 217:Core/Src/main.c ****     0.017881,
 218:Core/Src/main.c ****     0.017535,
 219:Core/Src/main.c ****     0.017167,
 220:Core/Src/main.c ****     0.016776,
 221:Core/Src/main.c ****     0.016366,
 222:Core/Src/main.c ****     0.015937,
 223:Core/Src/main.c ****     0.015489,
 224:Core/Src/main.c ****     0.015026,
 225:Core/Src/main.c ****     0.014547,
 226:Core/Src/main.c ****     0.014054,
 227:Core/Src/main.c ****     0.013550,
 228:Core/Src/main.c ****     0.013034,
 229:Core/Src/main.c ****     0.012509,
 230:Core/Src/main.c ****     0.011976,
 231:Core/Src/main.c ****     0.011436,
 232:Core/Src/main.c ****     0.010892,
 233:Core/Src/main.c ****     0.010344,
 234:Core/Src/main.c ****     0.009794,
 235:Core/Src/main.c ****     0.009243,
 236:Core/Src/main.c ****     0.008693,
 237:Core/Src/main.c ****     0.008146,
 238:Core/Src/main.c ****     0.007602,
 239:Core/Src/main.c ****     0.007063,
 240:Core/Src/main.c ****     0.006530,
 241:Core/Src/main.c ****     0.006004,
 242:Core/Src/main.c ****     0.005488,
 243:Core/Src/main.c ****     0.004981,
 244:Core/Src/main.c ****     0.004485,
 245:Core/Src/main.c ****     0.004001,
 246:Core/Src/main.c ****     0.003530,
 247:Core/Src/main.c ****     0.003073,
 248:Core/Src/main.c ****     0.002631,
 249:Core/Src/main.c ****     0.002204,
 250:Core/Src/main.c ****     0.001793,
 251:Core/Src/main.c ****     0.001399,
 252:Core/Src/main.c ****     0.001022,
 253:Core/Src/main.c ****     0.000663,
 254:Core/Src/main.c ****     0.000322,
 255:Core/Src/main.c ****     0.000000,
 256:Core/Src/main.c ****     -0.000303,
 257:Core/Src/main.c ****     -0.000588,
 258:Core/Src/main.c ****     -0.000853,
 259:Core/Src/main.c ****     -0.001099,
ARM GAS  /tmp/cccFkktC.s 			page 6


 260:Core/Src/main.c ****     -0.001326,
 261:Core/Src/main.c ****     -0.001534,
 262:Core/Src/main.c ****     -0.001722,
 263:Core/Src/main.c ****     -0.001893,
 264:Core/Src/main.c ****     -0.002045,
 265:Core/Src/main.c ****     -0.002178,
 266:Core/Src/main.c ****     -0.002294,
 267:Core/Src/main.c ****     -0.002393,
 268:Core/Src/main.c ****     -0.002475,
 269:Core/Src/main.c ****     -0.002541,
 270:Core/Src/main.c ****     -0.002592,
 271:Core/Src/main.c ****     -0.002627,
 272:Core/Src/main.c ****     -0.002648,
 273:Core/Src/main.c ****     -0.002655,
 274:Core/Src/main.c ****     -0.002650,
 275:Core/Src/main.c ****     -0.002632,
 276:Core/Src/main.c ****     -0.002603,
 277:Core/Src/main.c ****     -0.002563,
 278:Core/Src/main.c ****     -0.002513,
 279:Core/Src/main.c ****     -0.002454,
 280:Core/Src/main.c ****     -0.002387,
 281:Core/Src/main.c ****     -0.002312,
 282:Core/Src/main.c ****     -0.002230,
 283:Core/Src/main.c ****     -0.002142,
 284:Core/Src/main.c ****     -0.002049,
 285:Core/Src/main.c ****     -0.001952,
 286:Core/Src/main.c ****     -0.001851,
 287:Core/Src/main.c ****     -0.001746,
 288:Core/Src/main.c ****     -0.001640,
 289:Core/Src/main.c ****     -0.001532,
 290:Core/Src/main.c ****     -0.001422,
 291:Core/Src/main.c ****     -0.001313,
 292:Core/Src/main.c ****     -0.001203,
 293:Core/Src/main.c ****     -0.001095,
 294:Core/Src/main.c ****     -0.000987,
 295:Core/Src/main.c ****     -0.000881,
 296:Core/Src/main.c ****     -0.000778,
 297:Core/Src/main.c ****     -0.000677,
 298:Core/Src/main.c ****     -0.000579,
 299:Core/Src/main.c ****     -0.000484,
 300:Core/Src/main.c ****     -0.000393,
 301:Core/Src/main.c ****     -0.000306,
 302:Core/Src/main.c ****     -0.000223,
 303:Core/Src/main.c ****     -0.000144,
 304:Core/Src/main.c ****     -0.000070,
 305:Core/Src/main.c ****     -0.000000,
 306:Core/Src/main.c ****     0.000065,
 307:Core/Src/main.c ****     0.000125,
 308:Core/Src/main.c ****     0.000181,
 309:Core/Src/main.c ****     0.000231,
 310:Core/Src/main.c ****     0.000277,
 311:Core/Src/main.c ****     0.000319,
 312:Core/Src/main.c ****     0.000355,
 313:Core/Src/main.c ****     0.000388,
 314:Core/Src/main.c ****     0.000415,
 315:Core/Src/main.c ****     0.000439,
 316:Core/Src/main.c ****     0.000458,
ARM GAS  /tmp/cccFkktC.s 			page 7


 317:Core/Src/main.c ****     0.000474,
 318:Core/Src/main.c ****     0.000486,
 319:Core/Src/main.c ****     0.000494,
 320:Core/Src/main.c ****     0.000499,
 321:Core/Src/main.c ****     0.000500,
 322:Core/Src/main.c ****     0.000499,
 323:Core/Src/main.c ****     0.000496,
 324:Core/Src/main.c ****     0.000489,
 325:Core/Src/main.c ****     0.000481,
 326:Core/Src/main.c ****     0.000470,
 327:Core/Src/main.c ****     0.000458,
 328:Core/Src/main.c ****     0.000444,
 329:Core/Src/main.c ****     0.000429,
 330:Core/Src/main.c ****     0.000413,
 331:Core/Src/main.c ****     0.000396,
 332:Core/Src/main.c ****     0.000378,
 333:Core/Src/main.c ****     0.000359,
 334:Core/Src/main.c ****     0.000340,
 335:Core/Src/main.c ****     0.000320,
 336:Core/Src/main.c ****     0.000301,
 337:Core/Src/main.c ****     0.000281,
 338:Core/Src/main.c ****     0.000262,
 339:Core/Src/main.c ****     0.000242,
 340:Core/Src/main.c ****     0.000223,
 341:Core/Src/main.c ****     0.000205,
 342:Core/Src/main.c ****     0.000186,
 343:Core/Src/main.c ****     0.000169,
 344:Core/Src/main.c ****     0.000152,
 345:Core/Src/main.c ****     0.000135,
 346:Core/Src/main.c ****     0.000119,
 347:Core/Src/main.c ****     0.000103,
 348:Core/Src/main.c ****     0.000088,
 349:Core/Src/main.c ****     0.000074,
 350:Core/Src/main.c ****     0.000061,
 351:Core/Src/main.c ****     0.000047,
 352:Core/Src/main.c ****     0.000035,
 353:Core/Src/main.c ****     0.000023,
 354:Core/Src/main.c ****     0.000011,
 355:Core/Src/main.c ****     0.000000,
 356:Core/Src/main.c ****     -0.000011,
 357:Core/Src/main.c ****     -0.000021,
 358:Core/Src/main.c ****     -0.000031,
 359:Core/Src/main.c ****     -0.000041,
 360:Core/Src/main.c ****     -0.000051
 361:Core/Src/main.c **** };
 362:Core/Src/main.c **** /* USER CODE END PD */
 363:Core/Src/main.c **** 
 364:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
 365:Core/Src/main.c **** /* USER CODE BEGIN PM */
 366:Core/Src/main.c **** 
 367:Core/Src/main.c **** /* USER CODE END PM */
 368:Core/Src/main.c **** 
 369:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
 370:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
 371:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
 372:Core/Src/main.c **** 
 373:Core/Src/main.c **** TIM_HandleTypeDef htim2;
ARM GAS  /tmp/cccFkktC.s 			page 8


 374:Core/Src/main.c **** 
 375:Core/Src/main.c **** UART_HandleTypeDef huart1;
 376:Core/Src/main.c **** 
 377:Core/Src/main.c **** /* USER CODE BEGIN PV */
 378:Core/Src/main.c **** 
 379:Core/Src/main.c **** /* USER CODE END PV */
 380:Core/Src/main.c **** 
 381:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 382:Core/Src/main.c **** void SystemClock_Config(void);
 383:Core/Src/main.c **** static void MX_GPIO_Init(void);
 384:Core/Src/main.c **** static void MX_DMA_Init(void);
 385:Core/Src/main.c **** static void MX_ADC1_Init(void);
 386:Core/Src/main.c **** static void MX_TIM2_Init(void);
 387:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
 388:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 389:Core/Src/main.c **** 
 390:Core/Src/main.c **** /* USER CODE END PFP */
 391:Core/Src/main.c **** 
 392:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 393:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 394:Core/Src/main.c **** 
 395:Core/Src/main.c **** void processData(void){
 396:Core/Src/main.c ****     // Convert ADC data to float32_t
 397:Core/Src/main.c ****     for (uint32_t i = 0; i < BUFFER_SIZE; i++)
 398:Core/Src/main.c ****     {
 399:Core/Src/main.c ****         inputF32[i] = (float32_t)adcBuffer[i];
 400:Core/Src/main.c ****     }
 401:Core/Src/main.c **** 
 402:Core/Src/main.c ****     // Apply FIR filter
 403:Core/Src/main.c ****     arm_fir_f32(&S, inputF32, outputF32, BUFFER_SIZE);
 404:Core/Src/main.c **** 
 405:Core/Src/main.c ****     // Remove DC bias
 406:Core/Src/main.c ****     float32_t meanValue;
 407:Core/Src/main.c ****     arm_mean_f32(outputF32, BUFFER_SIZE, &meanValue);
 408:Core/Src/main.c ****     for (uint32_t i = 0; i < BUFFER_SIZE; i++)
 409:Core/Src/main.c ****     {
 410:Core/Src/main.c ****         outputF32[i] -= meanValue;
 411:Core/Src/main.c ****     }
 412:Core/Src/main.c **** 
 413:Core/Src/main.c ****     // ----------------------------
 414:Core/Src/main.c ****     // Zero-Crossing Detection Code
 415:Core/Src/main.c ****     // ----------------------------
 416:Core/Src/main.c **** 
 417:Core/Src/main.c ****     float32_t zeroCrossingTimes[BUFFER_SIZE]; // Store interpolated zero-crossing times
 418:Core/Src/main.c ****     uint32_t zeroCrossingCount = 0;
 419:Core/Src/main.c ****     char msg[100];
 420:Core/Src/main.c **** 
 421:Core/Src/main.c ****     // Detect zero crossings with linear interpolation
 422:Core/Src/main.c ****     for (uint32_t i = 1; i < BUFFER_SIZE; i++)
 423:Core/Src/main.c ****     {
 424:Core/Src/main.c ****         float32_t previousSample = outputF32[i - 1];
 425:Core/Src/main.c ****         float32_t currentSample = outputF32[i];
 426:Core/Src/main.c **** 
 427:Core/Src/main.c ****         // Check for zero crossing (sign change)
 428:Core/Src/main.c ****         if ((previousSample >= 0.0f && currentSample < 0.0f) ||
 429:Core/Src/main.c ****             (previousSample < 0.0f && currentSample >= 0.0f))
 430:Core/Src/main.c ****         {
ARM GAS  /tmp/cccFkktC.s 			page 9


 431:Core/Src/main.c ****             // Linear interpolation to estimate zero-crossing time
 432:Core/Src/main.c ****             float32_t delta = 0.0f;
 433:Core/Src/main.c ****             float32_t slope = currentSample - previousSample;
 434:Core/Src/main.c ****             if (slope != 0.0f)
 435:Core/Src/main.c ****             {
 436:Core/Src/main.c ****                 delta = -previousSample / slope;
 437:Core/Src/main.c ****             }
 438:Core/Src/main.c ****             // If slope is zero, delta remains 0
 439:Core/Src/main.c **** 
 440:Core/Src/main.c ****             float32_t zeroCrossingTime = (i - 1) + delta; // Fractional index
 441:Core/Src/main.c ****             zeroCrossingTimes[zeroCrossingCount++] = zeroCrossingTime;
 442:Core/Src/main.c ****         }
 443:Core/Src/main.c ****     }
 444:Core/Src/main.c **** 
 445:Core/Src/main.c ****     // Ensure we have detected enough zero crossings
 446:Core/Src/main.c ****     if (zeroCrossingCount < 3) // Need at least 3 zero crossings to calculate one full period
 447:Core/Src/main.c ****     {
 448:Core/Src/main.c ****         snprintf(msg, sizeof(msg), "Insufficient zero crossings detected.\r\n");
 449:Core/Src/main.c ****         HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 450:Core/Src/main.c ****         return;
 451:Core/Src/main.c ****     }
 452:Core/Src/main.c **** 
 453:Core/Src/main.c ****     // Calculate periods between zero crossings (full periods)
 454:Core/Src/main.c ****     float32_t periods[BUFFER_SIZE / 2];
 455:Core/Src/main.c ****     uint32_t periodCount = 0;
 456:Core/Src/main.c **** 
 457:Core/Src/main.c ****     for (uint32_t i = 2; i < zeroCrossingCount; i += 2)
 458:Core/Src/main.c ****     {
 459:Core/Src/main.c ****         float32_t periodSamples = zeroCrossingTimes[i] - zeroCrossingTimes[i - 2];
 460:Core/Src/main.c ****         periods[periodCount++] = periodSamples;
 461:Core/Src/main.c ****     }
 462:Core/Src/main.c **** 
 463:Core/Src/main.c ****     // Ensure we have at least one period
 464:Core/Src/main.c ****     if (periodCount == 0)
 465:Core/Src/main.c ****     {
 466:Core/Src/main.c ****         snprintf(msg, sizeof(msg), "No complete periods detected.\r\n");
 467:Core/Src/main.c ****         HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 468:Core/Src/main.c ****         return;
 469:Core/Src/main.c ****     }
 470:Core/Src/main.c **** 
 471:Core/Src/main.c ****     // Compute average period
 472:Core/Src/main.c ****     float32_t totalPeriod = 0.0f;
 473:Core/Src/main.c ****     for (uint32_t i = 0; i < periodCount; i++)
 474:Core/Src/main.c ****     {
 475:Core/Src/main.c ****         totalPeriod += periods[i];
 476:Core/Src/main.c ****     }
 477:Core/Src/main.c ****     float32_t averagePeriodSamples = totalPeriod / (float32_t)periodCount;
 478:Core/Src/main.c **** 
 479:Core/Src/main.c ****     // Calculate frequency from zero crossings
 480:Core/Src/main.c ****     float32_t zeroCrossingFrequency = (float32_t)FS / averagePeriodSamples;
 481:Core/Src/main.c **** 
 482:Core/Src/main.c ****     // -------------------------------------------
 483:Core/Src/main.c ****     // Circular Buffer to Average Last 4 Frequency Samples
 484:Core/Src/main.c ****     // -------------------------------------------
 485:Core/Src/main.c **** 
 486:Core/Src/main.c ****     #define FREQ_BUFFER_SIZE 4
 487:Core/Src/main.c ****     static float32_t frequencyBuffer[FREQ_BUFFER_SIZE] = {0};
ARM GAS  /tmp/cccFkktC.s 			page 10


 488:Core/Src/main.c ****     static uint32_t frequencyIndex = 0;
 489:Core/Src/main.c **** 
 490:Core/Src/main.c ****     // Update frequency buffer (circular buffer)
 491:Core/Src/main.c ****     frequencyBuffer[frequencyIndex] = zeroCrossingFrequency;
 492:Core/Src/main.c ****     frequencyIndex = (frequencyIndex + 1) % FREQ_BUFFER_SIZE; // Wrap around after reaching buffer 
 493:Core/Src/main.c **** 
 494:Core/Src/main.c ****     // Compute mean frequency using CMSIS-DSP function
 495:Core/Src/main.c ****     float32_t meanFrequency = 0.0f;
 496:Core/Src/main.c ****     arm_mean_f32(frequencyBuffer, FREQ_BUFFER_SIZE, &meanFrequency);
 497:Core/Src/main.c **** 
 498:Core/Src/main.c ****     // Send mean frequency over UART
 499:Core/Src/main.c ****     snprintf(msg, sizeof(msg), "Mean Frequency: %.2f Hz\r\n", meanFrequency);
 500:Core/Src/main.c ****     HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 501:Core/Src/main.c **** 
 502:Core/Src/main.c ****     // Perform FFT
 503:Core/Src/main.c ****     arm_rfft_fast_f32(&S_RFFT, outputF32, fftOutput, 0);
 504:Core/Src/main.c **** 
 505:Core/Src/main.c ****     // Compute magnitude of FFT
 506:Core/Src/main.c ****     arm_cmplx_mag_f32(fftOutput, fftMag, BUFFER_SIZE / 2);
 507:Core/Src/main.c **** 
 508:Core/Src/main.c ****     // Find the peak frequency
 509:Core/Src/main.c ****     float32_t maxValue;
 510:Core/Src/main.c ****     uint32_t maxIndex;
 511:Core/Src/main.c ****     arm_max_f32(fftMag, BUFFER_SIZE / 2, &maxValue, &maxIndex);
 512:Core/Src/main.c **** 
 513:Core/Src/main.c ****     // Calculate frequency resolution
 514:Core/Src/main.c ****     float32_t frequencyResolution = (float32_t)FS / (float32_t)BUFFER_SIZE;
 515:Core/Src/main.c **** 
 516:Core/Src/main.c ****     // Calculate peak frequency
 517:Core/Src/main.c ****     float32_t peakFrequency = frequencyResolution * (float32_t)maxIndex;
 518:Core/Src/main.c ****     // Send peak frequency over UART
 519:Core/Src/main.c ****     
 520:Core/Src/main.c ****     snprintf(msg, sizeof(msg), "Peak Frequency: %.2f Hz\r\n", peakFrequency);
 521:Core/Src/main.c ****     HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 522:Core/Src/main.c **** } 
 523:Core/Src/main.c **** 
 524:Core/Src/main.c **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 525:Core/Src/main.c ****   processData();
 526:Core/Src/main.c **** }
 527:Core/Src/main.c **** 
 528:Core/Src/main.c **** /* USER CODE END 0 */
 529:Core/Src/main.c **** 
 530:Core/Src/main.c **** /**
 531:Core/Src/main.c ****   * @brief  The application entry point.
 532:Core/Src/main.c ****   * @retval int
 533:Core/Src/main.c ****   */
 534:Core/Src/main.c **** int main(void)
 535:Core/Src/main.c **** {
 536:Core/Src/main.c **** 
 537:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 538:Core/Src/main.c **** 
 539:Core/Src/main.c ****   /* USER CODE END 1 */
 540:Core/Src/main.c **** 
 541:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 542:Core/Src/main.c **** 
 543:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 544:Core/Src/main.c ****   HAL_Init();
ARM GAS  /tmp/cccFkktC.s 			page 11


 545:Core/Src/main.c **** 
 546:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 547:Core/Src/main.c **** 
 548:Core/Src/main.c ****   /* USER CODE END Init */
 549:Core/Src/main.c **** 
 550:Core/Src/main.c ****   /* Configure the system clock */
 551:Core/Src/main.c ****   SystemClock_Config();
 552:Core/Src/main.c **** 
 553:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 554:Core/Src/main.c **** 
 555:Core/Src/main.c ****   /* USER CODE END SysInit */
 556:Core/Src/main.c **** 
 557:Core/Src/main.c ****   /* Initialize all configured peripherals */
 558:Core/Src/main.c ****   MX_GPIO_Init();
 559:Core/Src/main.c ****   MX_DMA_Init();
 560:Core/Src/main.c ****   MX_ADC1_Init();
 561:Core/Src/main.c ****   MX_TIM2_Init();
 562:Core/Src/main.c ****   MX_USART1_UART_Init();
 563:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 564:Core/Src/main.c **** 
 565:Core/Src/main.c ****   arm_fir_init_f32(&S, NUM_TAPS, firCoeffs32, firStateF32, BUFFER_SIZE);
 566:Core/Src/main.c ****   arm_rfft_fast_init_f32(&S_RFFT, BUFFER_SIZE);
 567:Core/Src/main.c ****   HAL_TIM_Base_Start(&htim2);
 568:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, BUFFER_SIZE);
 569:Core/Src/main.c ****   /* USER CODE END 2 */
 570:Core/Src/main.c **** 
 571:Core/Src/main.c ****   /* Infinite loop */
 572:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 573:Core/Src/main.c ****   while (1)
 574:Core/Src/main.c ****   {
 575:Core/Src/main.c ****     /* USER CODE END WHILE */
 576:Core/Src/main.c **** 
 577:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 578:Core/Src/main.c ****   }
 579:Core/Src/main.c ****   /* USER CODE END 3 */
 580:Core/Src/main.c **** }
 581:Core/Src/main.c **** 
 582:Core/Src/main.c **** /**
 583:Core/Src/main.c ****   * @brief System Clock Configuration
 584:Core/Src/main.c ****   * @retval None
 585:Core/Src/main.c ****   */
 586:Core/Src/main.c **** void SystemClock_Config(void)
 587:Core/Src/main.c **** {
 588:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 589:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 590:Core/Src/main.c **** 
 591:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 592:Core/Src/main.c ****   */
 593:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 594:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 595:Core/Src/main.c **** 
 596:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 597:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 598:Core/Src/main.c ****   */
 599:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 600:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 601:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
ARM GAS  /tmp/cccFkktC.s 			page 12


 602:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 603:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 25;
 604:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 605:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 606:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 607:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 608:Core/Src/main.c ****   {
 609:Core/Src/main.c ****     Error_Handler();
 610:Core/Src/main.c ****   }
 611:Core/Src/main.c **** 
 612:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 613:Core/Src/main.c ****   */
 614:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 615:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 616:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 617:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 618:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 619:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 620:Core/Src/main.c **** 
 621:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 622:Core/Src/main.c ****   {
 623:Core/Src/main.c ****     Error_Handler();
 624:Core/Src/main.c ****   }
 625:Core/Src/main.c **** }
 626:Core/Src/main.c **** 
 627:Core/Src/main.c **** /**
 628:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 629:Core/Src/main.c ****   * @param None
 630:Core/Src/main.c ****   * @retval None
 631:Core/Src/main.c ****   */
 632:Core/Src/main.c **** static void MX_ADC1_Init(void)
 633:Core/Src/main.c **** {
 634:Core/Src/main.c **** 
 635:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 636:Core/Src/main.c **** 
 637:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 638:Core/Src/main.c **** 
 639:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 640:Core/Src/main.c **** 
 641:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 642:Core/Src/main.c **** 
 643:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 644:Core/Src/main.c **** 
 645:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 646:Core/Src/main.c ****   */
 647:Core/Src/main.c ****   hadc1.Instance = ADC1;
 648:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 649:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 650:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 651:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 652:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 653:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 654:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 655:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 656:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 657:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 658:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
ARM GAS  /tmp/cccFkktC.s 			page 13


 659:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 660:Core/Src/main.c ****   {
 661:Core/Src/main.c ****     Error_Handler();
 662:Core/Src/main.c ****   }
 663:Core/Src/main.c **** 
 664:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 665:Core/Src/main.c ****   */
 666:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_8;
 667:Core/Src/main.c ****   sConfig.Rank = 1;
 668:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 669:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 670:Core/Src/main.c ****   {
 671:Core/Src/main.c ****     Error_Handler();
 672:Core/Src/main.c ****   }
 673:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 674:Core/Src/main.c **** 
 675:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 676:Core/Src/main.c **** 
 677:Core/Src/main.c **** }
 678:Core/Src/main.c **** 
 679:Core/Src/main.c **** /**
 680:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 681:Core/Src/main.c ****   * @param None
 682:Core/Src/main.c ****   * @retval None
 683:Core/Src/main.c ****   */
 684:Core/Src/main.c **** static void MX_TIM2_Init(void)
 685:Core/Src/main.c **** {
 686:Core/Src/main.c **** 
 687:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 688:Core/Src/main.c **** 
 689:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 690:Core/Src/main.c **** 
 691:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 692:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 693:Core/Src/main.c **** 
 694:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 695:Core/Src/main.c **** 
 696:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 697:Core/Src/main.c ****   htim2.Instance = TIM2;
 698:Core/Src/main.c ****   htim2.Init.Prescaler = 20-1;
 699:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 700:Core/Src/main.c ****   htim2.Init.Period = 525-1;
 701:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 702:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 703:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 704:Core/Src/main.c ****   {
 705:Core/Src/main.c ****     Error_Handler();
 706:Core/Src/main.c ****   }
 707:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 708:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 709:Core/Src/main.c ****   {
 710:Core/Src/main.c ****     Error_Handler();
 711:Core/Src/main.c ****   }
 712:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 713:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 714:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 715:Core/Src/main.c ****   {
ARM GAS  /tmp/cccFkktC.s 			page 14


 716:Core/Src/main.c ****     Error_Handler();
 717:Core/Src/main.c ****   }
 718:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 719:Core/Src/main.c **** 
 720:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 721:Core/Src/main.c **** 
 722:Core/Src/main.c **** }
 723:Core/Src/main.c **** 
 724:Core/Src/main.c **** /**
 725:Core/Src/main.c ****   * @brief USART1 Initialization Function
 726:Core/Src/main.c ****   * @param None
 727:Core/Src/main.c ****   * @retval None
 728:Core/Src/main.c ****   */
 729:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 730:Core/Src/main.c **** {
 731:Core/Src/main.c **** 
 732:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 733:Core/Src/main.c **** 
 734:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 735:Core/Src/main.c **** 
 736:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 737:Core/Src/main.c **** 
 738:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 739:Core/Src/main.c ****   huart1.Instance = USART1;
 740:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 741:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 742:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 743:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 744:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 745:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 746:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 747:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 748:Core/Src/main.c ****   {
 749:Core/Src/main.c ****     Error_Handler();
 750:Core/Src/main.c ****   }
 751:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 752:Core/Src/main.c **** 
 753:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 754:Core/Src/main.c **** 
 755:Core/Src/main.c **** }
 756:Core/Src/main.c **** 
 757:Core/Src/main.c **** /**
 758:Core/Src/main.c ****   * Enable DMA controller clock
 759:Core/Src/main.c ****   */
 760:Core/Src/main.c **** static void MX_DMA_Init(void)
 761:Core/Src/main.c **** {
 762:Core/Src/main.c **** 
 763:Core/Src/main.c ****   /* DMA controller clock enable */
 764:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 765:Core/Src/main.c **** 
 766:Core/Src/main.c ****   /* DMA interrupt init */
 767:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 768:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 769:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 770:Core/Src/main.c **** 
 771:Core/Src/main.c **** }
 772:Core/Src/main.c **** 
ARM GAS  /tmp/cccFkktC.s 			page 15


 773:Core/Src/main.c **** /**
 774:Core/Src/main.c ****   * @brief GPIO Initialization Function
 775:Core/Src/main.c ****   * @param None
 776:Core/Src/main.c ****   * @retval None
 777:Core/Src/main.c ****   */
 778:Core/Src/main.c **** static void MX_GPIO_Init(void)
 779:Core/Src/main.c **** {
  28              		.loc 1 779 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 84B0     		sub	sp, sp, #16
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
 780:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 781:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 782:Core/Src/main.c **** 
 783:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 784:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  36              		.loc 1 784 3 view .LVU1
  37              	.LBB4:
  38              		.loc 1 784 3 view .LVU2
  39 0002 0022     		movs	r2, #0
  40 0004 0192     		str	r2, [sp, #4]
  41              		.loc 1 784 3 view .LVU3
  42 0006 104B     		ldr	r3, .L3
  43 0008 196B     		ldr	r1, [r3, #48]
  44 000a 41F08001 		orr	r1, r1, #128
  45 000e 1963     		str	r1, [r3, #48]
  46              		.loc 1 784 3 view .LVU4
  47 0010 196B     		ldr	r1, [r3, #48]
  48 0012 01F08001 		and	r1, r1, #128
  49 0016 0191     		str	r1, [sp, #4]
  50              		.loc 1 784 3 view .LVU5
  51 0018 0199     		ldr	r1, [sp, #4]
  52              	.LBE4:
  53              		.loc 1 784 3 view .LVU6
 785:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  54              		.loc 1 785 3 view .LVU7
  55              	.LBB5:
  56              		.loc 1 785 3 view .LVU8
  57 001a 0292     		str	r2, [sp, #8]
  58              		.loc 1 785 3 view .LVU9
  59 001c 196B     		ldr	r1, [r3, #48]
  60 001e 41F00201 		orr	r1, r1, #2
  61 0022 1963     		str	r1, [r3, #48]
  62              		.loc 1 785 3 view .LVU10
  63 0024 196B     		ldr	r1, [r3, #48]
  64 0026 01F00201 		and	r1, r1, #2
  65 002a 0291     		str	r1, [sp, #8]
  66              		.loc 1 785 3 view .LVU11
  67 002c 0299     		ldr	r1, [sp, #8]
  68              	.LBE5:
  69              		.loc 1 785 3 view .LVU12
 786:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  70              		.loc 1 786 3 view .LVU13
ARM GAS  /tmp/cccFkktC.s 			page 16


  71              	.LBB6:
  72              		.loc 1 786 3 view .LVU14
  73 002e 0392     		str	r2, [sp, #12]
  74              		.loc 1 786 3 view .LVU15
  75 0030 1A6B     		ldr	r2, [r3, #48]
  76 0032 42F00102 		orr	r2, r2, #1
  77 0036 1A63     		str	r2, [r3, #48]
  78              		.loc 1 786 3 view .LVU16
  79 0038 1B6B     		ldr	r3, [r3, #48]
  80 003a 03F00103 		and	r3, r3, #1
  81 003e 0393     		str	r3, [sp, #12]
  82              		.loc 1 786 3 view .LVU17
  83 0040 039B     		ldr	r3, [sp, #12]
  84              	.LBE6:
  85              		.loc 1 786 3 view .LVU18
 787:Core/Src/main.c **** 
 788:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 789:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 790:Core/Src/main.c **** }
  86              		.loc 1 790 1 is_stmt 0 view .LVU19
  87 0042 04B0     		add	sp, sp, #16
  88              	.LCFI1:
  89              		.cfi_def_cfa_offset 0
  90              		@ sp needed
  91 0044 7047     		bx	lr
  92              	.L4:
  93 0046 00BF     		.align	2
  94              	.L3:
  95 0048 00380240 		.word	1073887232
  96              		.cfi_endproc
  97              	.LFE261:
  99              		.section	.text.MX_DMA_Init,"ax",%progbits
 100              		.align	1
 101              		.syntax unified
 102              		.thumb
 103              		.thumb_func
 105              	MX_DMA_Init:
 106              	.LFB260:
 761:Core/Src/main.c **** 
 107              		.loc 1 761 1 is_stmt 1 view -0
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 8
 110              		@ frame_needed = 0, uses_anonymous_args = 0
 111 0000 00B5     		push	{lr}
 112              	.LCFI2:
 113              		.cfi_def_cfa_offset 4
 114              		.cfi_offset 14, -4
 115 0002 83B0     		sub	sp, sp, #12
 116              	.LCFI3:
 117              		.cfi_def_cfa_offset 16
 764:Core/Src/main.c **** 
 118              		.loc 1 764 3 view .LVU21
 119              	.LBB7:
 764:Core/Src/main.c **** 
 120              		.loc 1 764 3 view .LVU22
 121 0004 0021     		movs	r1, #0
 122 0006 0191     		str	r1, [sp, #4]
ARM GAS  /tmp/cccFkktC.s 			page 17


 764:Core/Src/main.c **** 
 123              		.loc 1 764 3 view .LVU23
 124 0008 094B     		ldr	r3, .L7
 125 000a 1A6B     		ldr	r2, [r3, #48]
 126 000c 42F48002 		orr	r2, r2, #4194304
 127 0010 1A63     		str	r2, [r3, #48]
 764:Core/Src/main.c **** 
 128              		.loc 1 764 3 view .LVU24
 129 0012 1B6B     		ldr	r3, [r3, #48]
 130 0014 03F48003 		and	r3, r3, #4194304
 131 0018 0193     		str	r3, [sp, #4]
 764:Core/Src/main.c **** 
 132              		.loc 1 764 3 view .LVU25
 133 001a 019B     		ldr	r3, [sp, #4]
 134              	.LBE7:
 764:Core/Src/main.c **** 
 135              		.loc 1 764 3 view .LVU26
 768:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 136              		.loc 1 768 3 view .LVU27
 137 001c 0A46     		mov	r2, r1
 138 001e 3820     		movs	r0, #56
 139 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 140              	.LVL0:
 769:Core/Src/main.c **** 
 141              		.loc 1 769 3 view .LVU28
 142 0024 3820     		movs	r0, #56
 143 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 144              	.LVL1:
 771:Core/Src/main.c **** 
 145              		.loc 1 771 1 is_stmt 0 view .LVU29
 146 002a 03B0     		add	sp, sp, #12
 147              	.LCFI4:
 148              		.cfi_def_cfa_offset 4
 149              		@ sp needed
 150 002c 5DF804FB 		ldr	pc, [sp], #4
 151              	.L8:
 152              		.align	2
 153              	.L7:
 154 0030 00380240 		.word	1073887232
 155              		.cfi_endproc
 156              	.LFE260:
 158              		.section	.rodata.processData.str1.4,"aMS",%progbits,1
 159              		.align	2
 160              	.LC0:
 161 0000 496E7375 		.ascii	"Insufficient zero crossings detected.\015\012\000"
 161      66666963 
 161      69656E74 
 161      207A6572 
 161      6F206372 
 162              		.align	2
 163              	.LC1:
 164 0028 4E6F2063 		.ascii	"No complete periods detected.\015\012\000"
 164      6F6D706C 
 164      65746520 
 164      70657269 
 164      6F647320 
 165              		.align	2
ARM GAS  /tmp/cccFkktC.s 			page 18


 166              	.LC2:
 167 0048 4D65616E 		.ascii	"Mean Frequency: %.2f Hz\015\012\000"
 167      20467265 
 167      7175656E 
 167      63793A20 
 167      252E3266 
 168              		.global	__aeabi_f2d
 169 0062 0000     		.align	2
 170              	.LC3:
 171 0064 5065616B 		.ascii	"Peak Frequency: %.2f Hz\015\012\000"
 171      20467265 
 171      7175656E 
 171      63793A20 
 171      252E3266 
 172              		.section	.text.processData,"ax",%progbits
 173              		.align	1
 174              		.global	processData
 175              		.syntax unified
 176              		.thumb
 177              		.thumb_func
 179              	processData:
 180              	.LFB253:
 395:Core/Src/main.c ****     // Convert ADC data to float32_t
 181              		.loc 1 395 23 is_stmt 1 view -0
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 12408
 184              		@ frame_needed = 0, uses_anonymous_args = 0
 185 0000 70B5     		push	{r4, r5, r6, lr}
 186              	.LCFI5:
 187              		.cfi_def_cfa_offset 16
 188              		.cfi_offset 4, -16
 189              		.cfi_offset 5, -12
 190              		.cfi_offset 6, -8
 191              		.cfi_offset 14, -4
 192 0002 ADF5425D 		sub	sp, sp, #12416
 193              	.LCFI6:
 194              		.cfi_def_cfa_offset 12432
 397:Core/Src/main.c ****     {
 195              		.loc 1 397 5 view .LVU31
 196              	.LBB8:
 397:Core/Src/main.c ****     {
 197              		.loc 1 397 10 view .LVU32
 198              	.LVL2:
 397:Core/Src/main.c ****     {
 199              		.loc 1 397 19 is_stmt 0 view .LVU33
 200 0006 0023     		movs	r3, #0
 397:Core/Src/main.c ****     {
 201              		.loc 1 397 5 view .LVU34
 202 0008 0CE0     		b	.L10
 203              	.LVL3:
 204              	.L11:
 399:Core/Src/main.c ****     }
 205              		.loc 1 399 9 is_stmt 1 discriminator 3 view .LVU35
 399:Core/Src/main.c ****     }
 206              		.loc 1 399 43 is_stmt 0 discriminator 3 view .LVU36
 207 000a A64A     		ldr	r2, .L40
 208 000c 32F81320 		ldrh	r2, [r2, r3, lsl #1]
ARM GAS  /tmp/cccFkktC.s 			page 19


 209 0010 07EE902A 		vmov	s15, r2	@ int
 399:Core/Src/main.c ****     }
 210              		.loc 1 399 23 discriminator 3 view .LVU37
 211 0014 F8EE677A 		vcvt.f32.u32	s15, s15
 399:Core/Src/main.c ****     }
 212              		.loc 1 399 21 discriminator 3 view .LVU38
 213 0018 A34A     		ldr	r2, .L40+4
 214 001a 02EB8302 		add	r2, r2, r3, lsl #2
 215 001e C2ED007A 		vstr.32	s15, [r2]
 397:Core/Src/main.c ****     {
 216              		.loc 1 397 44 is_stmt 1 discriminator 3 view .LVU39
 217 0022 0133     		adds	r3, r3, #1
 218              	.LVL4:
 219              	.L10:
 397:Core/Src/main.c ****     {
 220              		.loc 1 397 28 discriminator 1 view .LVU40
 221 0024 B3F5006F 		cmp	r3, #2048
 222 0028 EFD3     		bcc	.L11
 223              	.LBE8:
 403:Core/Src/main.c **** 
 224              		.loc 1 403 5 view .LVU41
 225 002a A04C     		ldr	r4, .L40+8
 226 002c 4FF40063 		mov	r3, #2048
 227              	.LVL5:
 403:Core/Src/main.c **** 
 228              		.loc 1 403 5 is_stmt 0 view .LVU42
 229 0030 2246     		mov	r2, r4
 230 0032 9D49     		ldr	r1, .L40+4
 231 0034 9E48     		ldr	r0, .L40+12
 232 0036 FFF7FEFF 		bl	arm_fir_f32
 233              	.LVL6:
 406:Core/Src/main.c ****     arm_mean_f32(outputF32, BUFFER_SIZE, &meanValue);
 234              		.loc 1 406 5 is_stmt 1 view .LVU43
 407:Core/Src/main.c ****     for (uint32_t i = 0; i < BUFFER_SIZE; i++)
 235              		.loc 1 407 5 view .LVU44
 236 003a 0DF54152 		add	r2, sp, #12352
 237 003e 3C32     		adds	r2, r2, #60
 238 0040 4FF40061 		mov	r1, #2048
 239 0044 2046     		mov	r0, r4
 240 0046 FFF7FEFF 		bl	arm_mean_f32
 241              	.LVL7:
 408:Core/Src/main.c ****     {
 242              		.loc 1 408 5 view .LVU45
 243              	.LBB9:
 408:Core/Src/main.c ****     {
 244              		.loc 1 408 10 view .LVU46
 408:Core/Src/main.c ****     {
 245              		.loc 1 408 19 is_stmt 0 view .LVU47
 246 004a 0022     		movs	r2, #0
 408:Core/Src/main.c ****     {
 247              		.loc 1 408 5 view .LVU48
 248 004c 0EE0     		b	.L12
 249              	.LVL8:
 250              	.L13:
 410:Core/Src/main.c ****     }
 251              		.loc 1 410 9 is_stmt 1 discriminator 3 view .LVU49
 410:Core/Src/main.c ****     }
ARM GAS  /tmp/cccFkktC.s 			page 20


 252              		.loc 1 410 18 is_stmt 0 discriminator 3 view .LVU50
 253 004e 974B     		ldr	r3, .L40+8
 254 0050 03EB8203 		add	r3, r3, r2, lsl #2
 255 0054 D3ED007A 		vldr.32	s15, [r3]
 410:Core/Src/main.c ****     }
 256              		.loc 1 410 22 discriminator 3 view .LVU51
 257 0058 0DF54151 		add	r1, sp, #12352
 258 005c 3C31     		adds	r1, r1, #60
 259 005e 91ED007A 		vldr.32	s14, [r1]
 260 0062 77EEC77A 		vsub.f32	s15, s15, s14
 261 0066 C3ED007A 		vstr.32	s15, [r3]
 408:Core/Src/main.c ****     {
 262              		.loc 1 408 44 is_stmt 1 discriminator 3 view .LVU52
 263 006a 0132     		adds	r2, r2, #1
 264              	.LVL9:
 265              	.L12:
 408:Core/Src/main.c ****     {
 266              		.loc 1 408 28 discriminator 1 view .LVU53
 267 006c B2F5006F 		cmp	r2, #2048
 268 0070 EDD3     		bcc	.L13
 269              	.LBE9:
 270              	.LBB10:
 422:Core/Src/main.c ****     {
 271              		.loc 1 422 19 is_stmt 0 view .LVU54
 272 0072 0123     		movs	r3, #1
 273              	.LBE10:
 418:Core/Src/main.c ****     char msg[100];
 274              		.loc 1 418 14 view .LVU55
 275 0074 4FF0000C 		mov	ip, #0
 276 0078 05E0     		b	.L14
 277              	.LVL10:
 278              	.L15:
 279              	.LBB15:
 280              	.LBB11:
 428:Core/Src/main.c ****             (previousSample < 0.0f && currentSample >= 0.0f))
 281              		.loc 1 428 62 discriminator 3 view .LVU56
 282 007a F5EEC07A 		vcmpe.f32	s15, #0
 283 007e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 284 0082 31D4     		bmi	.L35
 285              	.LVL11:
 286              	.L18:
 428:Core/Src/main.c ****             (previousSample < 0.0f && currentSample >= 0.0f))
 287              		.loc 1 428 62 discriminator 3 view .LVU57
 288              	.LBE11:
 422:Core/Src/main.c ****     {
 289              		.loc 1 422 44 is_stmt 1 discriminator 2 view .LVU58
 290 0084 0133     		adds	r3, r3, #1
 291              	.LVL12:
 292              	.L14:
 422:Core/Src/main.c ****     {
 293              		.loc 1 422 28 discriminator 1 view .LVU59
 294 0086 B3F5006F 		cmp	r3, #2048
 295 008a 36D2     		bcs	.L36
 296              	.LBB14:
 424:Core/Src/main.c ****         float32_t currentSample = outputF32[i];
 297              		.loc 1 424 9 view .LVU60
 424:Core/Src/main.c ****         float32_t currentSample = outputF32[i];
ARM GAS  /tmp/cccFkktC.s 			page 21


 298              		.loc 1 424 48 is_stmt 0 view .LVU61
 299 008c 591E     		subs	r1, r3, #1
 424:Core/Src/main.c ****         float32_t currentSample = outputF32[i];
 300              		.loc 1 424 19 view .LVU62
 301 008e 874A     		ldr	r2, .L40+8
 302 0090 02EB8100 		add	r0, r2, r1, lsl #2
 303 0094 D0ED007A 		vldr.32	s15, [r0]
 304              	.LVL13:
 425:Core/Src/main.c **** 
 305              		.loc 1 425 9 is_stmt 1 view .LVU63
 425:Core/Src/main.c **** 
 306              		.loc 1 425 19 is_stmt 0 view .LVU64
 307 0098 02EB8302 		add	r2, r2, r3, lsl #2
 308 009c 92ED007A 		vldr.32	s14, [r2]
 309              	.LVL14:
 428:Core/Src/main.c ****             (previousSample < 0.0f && currentSample >= 0.0f))
 310              		.loc 1 428 9 is_stmt 1 view .LVU65
 428:Core/Src/main.c ****             (previousSample < 0.0f && currentSample >= 0.0f))
 311              		.loc 1 428 12 is_stmt 0 view .LVU66
 312 00a0 F5EEC07A 		vcmpe.f32	s15, #0
 313 00a4 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 314 00a8 E7DB     		blt	.L15
 428:Core/Src/main.c ****             (previousSample < 0.0f && currentSample >= 0.0f))
 315              		.loc 1 428 37 discriminator 1 view .LVU67
 316 00aa B5EEC07A 		vcmpe.f32	s14, #0
 317 00ae F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 318 00b2 E2D5     		bpl	.L15
 319              	.L17:
 320              	.LBB12:
 432:Core/Src/main.c ****             float32_t slope = currentSample - previousSample;
 321              		.loc 1 432 13 is_stmt 1 view .LVU68
 322              	.LVL15:
 433:Core/Src/main.c ****             if (slope != 0.0f)
 323              		.loc 1 433 13 view .LVU69
 433:Core/Src/main.c ****             if (slope != 0.0f)
 324              		.loc 1 433 23 is_stmt 0 view .LVU70
 325 00b4 37EE677A 		vsub.f32	s14, s14, s15
 326              	.LVL16:
 434:Core/Src/main.c ****             {
 327              		.loc 1 434 13 is_stmt 1 view .LVU71
 434:Core/Src/main.c ****             {
 328              		.loc 1 434 16 is_stmt 0 view .LVU72
 329 00b8 B5EE407A 		vcmp.f32	s14, #0
 330 00bc F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 331 00c0 18D0     		beq	.L29
 436:Core/Src/main.c ****             }
 332              		.loc 1 436 17 is_stmt 1 view .LVU73
 436:Core/Src/main.c ****             }
 333              		.loc 1 436 25 is_stmt 0 view .LVU74
 334 00c2 F1EE677A 		vneg.f32	s15, s15
 335              	.LVL17:
 436:Core/Src/main.c ****             }
 336              		.loc 1 436 23 view .LVU75
 337 00c6 C7EE876A 		vdiv.f32	s13, s15, s14
 338              	.LVL18:
 339              	.L21:
 440:Core/Src/main.c ****             zeroCrossingTimes[zeroCrossingCount++] = zeroCrossingTime;
ARM GAS  /tmp/cccFkktC.s 			page 22


 340              		.loc 1 440 13 is_stmt 1 view .LVU76
 440:Core/Src/main.c ****             zeroCrossingTimes[zeroCrossingCount++] = zeroCrossingTime;
 341              		.loc 1 440 50 is_stmt 0 view .LVU77
 342 00ca 07EE901A 		vmov	s15, r1	@ int
 343 00ce F8EE677A 		vcvt.f32.u32	s15, s15
 440:Core/Src/main.c ****             zeroCrossingTimes[zeroCrossingCount++] = zeroCrossingTime;
 344              		.loc 1 440 23 view .LVU78
 345 00d2 77EEA67A 		vadd.f32	s15, s15, s13
 346              	.LVL19:
 441:Core/Src/main.c ****         }
 347              		.loc 1 441 13 is_stmt 1 view .LVU79
 441:Core/Src/main.c ****         }
 348              		.loc 1 441 52 is_stmt 0 view .LVU80
 349 00d6 0DF58452 		add	r2, sp, #4224
 350              	.LVL20:
 441:Core/Src/main.c ****         }
 351              		.loc 1 441 52 view .LVU81
 352 00da 02EB8C02 		add	r2, r2, ip, lsl #2
 353 00de 42ED017A 		vstr.32	s15, [r2, #-4]
 441:Core/Src/main.c ****         }
 354              		.loc 1 441 48 view .LVU82
 355 00e2 0CF1010C 		add	ip, ip, #1
 356              	.LVL21:
 441:Core/Src/main.c ****         }
 357              		.loc 1 441 48 view .LVU83
 358 00e6 CDE7     		b	.L18
 359              	.LVL22:
 360              	.L35:
 441:Core/Src/main.c ****         }
 361              		.loc 1 441 48 view .LVU84
 362              	.LBE12:
 429:Core/Src/main.c ****         {
 363              		.loc 1 429 36 view .LVU85
 364 00e8 B5EEC07A 		vcmpe.f32	s14, #0
 365 00ec F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 366 00f0 E0DA     		bge	.L17
 367 00f2 C7E7     		b	.L18
 368              	.LVL23:
 369              	.L29:
 370              	.LBB13:
 432:Core/Src/main.c ****             float32_t slope = currentSample - previousSample;
 371              		.loc 1 432 23 view .LVU86
 372 00f4 DFED6F6A 		vldr.32	s13, .L40+16
 373 00f8 E7E7     		b	.L21
 374              	.LVL24:
 375              	.L36:
 432:Core/Src/main.c ****             float32_t slope = currentSample - previousSample;
 376              		.loc 1 432 23 view .LVU87
 377              	.LBE13:
 378              	.LBE14:
 379              	.LBE15:
 446:Core/Src/main.c ****     {
 380              		.loc 1 446 5 is_stmt 1 view .LVU88
 446:Core/Src/main.c ****     {
 381              		.loc 1 446 8 is_stmt 0 view .LVU89
 382 00fa BCF1020F 		cmp	ip, #2
 383 00fe 02D9     		bls	.L37
ARM GAS  /tmp/cccFkktC.s 			page 23


 384              	.LBB16:
 457:Core/Src/main.c ****     {
 385              		.loc 1 457 19 view .LVU90
 386 0100 0223     		movs	r3, #2
 387              	.LVL25:
 457:Core/Src/main.c ****     {
 388              		.loc 1 457 19 view .LVU91
 389              	.LBE16:
 455:Core/Src/main.c **** 
 390              		.loc 1 455 14 view .LVU92
 391 0102 0021     		movs	r1, #0
 392 0104 33E0     		b	.L23
 393              	.LVL26:
 394              	.L37:
 395              	.LBB19:
 448:Core/Src/main.c ****         HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 396              		.loc 1 448 9 is_stmt 1 view .LVU93
 397 0106 0DF5805C 		add	ip, sp, #4096
 398              	.LVL27:
 448:Core/Src/main.c ****         HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 399              		.loc 1 448 9 is_stmt 0 view .LVU94
 400 010a 0CF1180C 		add	ip, ip, #24
 401 010e 6A4C     		ldr	r4, .L40+20
 402 0110 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 403              	.LVL28:
 448:Core/Src/main.c ****         HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 404              		.loc 1 448 9 view .LVU95
 405 0112 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 406 0116 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 407 0118 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 408 011c 94E80300 		ldm	r4, {r0, r1}
 409 0120 8CE80300 		stm	ip, {r0, r1}
 449:Core/Src/main.c ****         return;
 410              		.loc 1 449 9 is_stmt 1 view .LVU96
 449:Core/Src/main.c ****         return;
 411              		.loc 1 449 51 is_stmt 0 view .LVU97
 412 0124 0DF58050 		add	r0, sp, #4096
 413 0128 1830     		adds	r0, r0, #24
 414 012a FFF7FEFF 		bl	strlen
 415              	.LVL29:
 449:Core/Src/main.c ****         return;
 416              		.loc 1 449 9 view .LVU98
 417 012e 4FF0FF33 		mov	r3, #-1
 418 0132 82B2     		uxth	r2, r0
 419 0134 0DF58051 		add	r1, sp, #4096
 420 0138 1831     		adds	r1, r1, #24
 421 013a 6048     		ldr	r0, .L40+24
 422 013c FFF7FEFF 		bl	HAL_UART_Transmit
 423              	.LVL30:
 450:Core/Src/main.c ****     }
 424              		.loc 1 450 9 is_stmt 1 view .LVU99
 425 0140 ADE0     		b	.L9
 426              	.LVL31:
 427              	.L25:
 450:Core/Src/main.c ****     }
 428              		.loc 1 450 9 is_stmt 0 view .LVU100
 429              	.LBE19:
ARM GAS  /tmp/cccFkktC.s 			page 24


 430              	.LBB20:
 431              	.LBB17:
 459:Core/Src/main.c ****         periods[periodCount++] = periodSamples;
 432              		.loc 1 459 9 is_stmt 1 discriminator 3 view .LVU101
 459:Core/Src/main.c ****         periods[periodCount++] = periodSamples;
 433              		.loc 1 459 52 is_stmt 0 discriminator 3 view .LVU102
 434 0142 0DF58452 		add	r2, sp, #4224
 435 0146 02EB8302 		add	r2, r2, r3, lsl #2
 436 014a 52ED017A 		vldr.32	s15, [r2, #-4]
 459:Core/Src/main.c ****         periods[periodCount++] = periodSamples;
 437              		.loc 1 459 78 discriminator 3 view .LVU103
 438 014e 9A1E     		subs	r2, r3, #2
 459:Core/Src/main.c ****         periods[periodCount++] = periodSamples;
 439              		.loc 1 459 75 discriminator 3 view .LVU104
 440 0150 0DF58450 		add	r0, sp, #4224
 441 0154 00EB8202 		add	r2, r0, r2, lsl #2
 442 0158 12ED017A 		vldr.32	s14, [r2, #-4]
 459:Core/Src/main.c ****         periods[periodCount++] = periodSamples;
 443              		.loc 1 459 19 discriminator 3 view .LVU105
 444 015c 77EEC77A 		vsub.f32	s15, s15, s14
 445              	.LVL32:
 460:Core/Src/main.c ****     }
 446              		.loc 1 460 9 is_stmt 1 discriminator 3 view .LVU106
 460:Core/Src/main.c ****     }
 447              		.loc 1 460 32 is_stmt 0 discriminator 3 view .LVU107
 448 0160 20AA     		add	r2, sp, #128
 449 0162 02EB8102 		add	r2, r2, r1, lsl #2
 450 0166 42ED1A7A 		vstr.32	s15, [r2, #-104]
 451              	.LBE17:
 457:Core/Src/main.c ****     {
 452              		.loc 1 457 51 is_stmt 1 discriminator 3 view .LVU108
 453 016a 0233     		adds	r3, r3, #2
 454              	.LVL33:
 455              	.LBB18:
 460:Core/Src/main.c ****     }
 456              		.loc 1 460 28 is_stmt 0 discriminator 3 view .LVU109
 457 016c 0131     		adds	r1, r1, #1
 458              	.LVL34:
 459              	.L23:
 460:Core/Src/main.c ****     }
 460              		.loc 1 460 28 discriminator 3 view .LVU110
 461              	.LBE18:
 457:Core/Src/main.c ****     {
 462              		.loc 1 457 28 is_stmt 1 discriminator 1 view .LVU111
 463 016e 9C45     		cmp	ip, r3
 464 0170 E7D8     		bhi	.L25
 465              	.LBE20:
 464:Core/Src/main.c ****     {
 466              		.loc 1 464 5 view .LVU112
 464:Core/Src/main.c ****     {
 467              		.loc 1 464 8 is_stmt 0 view .LVU113
 468 0172 69B1     		cbz	r1, .L38
 469              	.LBB21:
 473:Core/Src/main.c ****     {
 470              		.loc 1 473 19 view .LVU114
 471 0174 0023     		movs	r3, #0
 472              	.LVL35:
ARM GAS  /tmp/cccFkktC.s 			page 25


 473:Core/Src/main.c ****     {
 473              		.loc 1 473 19 view .LVU115
 474              	.LBE21:
 472:Core/Src/main.c ****     for (uint32_t i = 0; i < periodCount; i++)
 475              		.loc 1 472 15 view .LVU116
 476 0176 9FED4F7A 		vldr.32	s14, .L40+16
 477              	.L26:
 478              	.LVL36:
 479              	.LBB22:
 473:Core/Src/main.c ****     {
 480              		.loc 1 473 28 is_stmt 1 discriminator 1 view .LVU117
 481 017a 9942     		cmp	r1, r3
 482 017c 21D9     		bls	.L39
 475:Core/Src/main.c ****     }
 483              		.loc 1 475 9 discriminator 3 view .LVU118
 475:Core/Src/main.c ****     }
 484              		.loc 1 475 31 is_stmt 0 discriminator 3 view .LVU119
 485 017e 20AA     		add	r2, sp, #128
 486 0180 02EB8302 		add	r2, r2, r3, lsl #2
 487 0184 52ED1A7A 		vldr.32	s15, [r2, #-104]
 475:Core/Src/main.c ****     }
 488              		.loc 1 475 21 discriminator 3 view .LVU120
 489 0188 37EE277A 		vadd.f32	s14, s14, s15
 490              	.LVL37:
 473:Core/Src/main.c ****     {
 491              		.loc 1 473 44 is_stmt 1 discriminator 3 view .LVU121
 492 018c 0133     		adds	r3, r3, #1
 493              	.LVL38:
 473:Core/Src/main.c ****     {
 494              		.loc 1 473 44 is_stmt 0 discriminator 3 view .LVU122
 495 018e F4E7     		b	.L26
 496              	.LVL39:
 497              	.L38:
 473:Core/Src/main.c ****     {
 498              		.loc 1 473 44 discriminator 3 view .LVU123
 499              	.LBE22:
 500              	.LBB23:
 466:Core/Src/main.c ****         HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 501              		.loc 1 466 9 is_stmt 1 view .LVU124
 502 0190 0DF58054 		add	r4, sp, #4096
 503 0194 1834     		adds	r4, r4, #24
 504 0196 4A4D     		ldr	r5, .L40+28
 505 0198 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 506              	.LVL40:
 466:Core/Src/main.c ****         HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 507              		.loc 1 466 9 is_stmt 0 view .LVU125
 508 019a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 509 019c 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 510 01a0 84E80F00 		stm	r4, {r0, r1, r2, r3}
 467:Core/Src/main.c ****         return;
 511              		.loc 1 467 9 is_stmt 1 view .LVU126
 467:Core/Src/main.c ****         return;
 512              		.loc 1 467 51 is_stmt 0 view .LVU127
 513 01a4 0DF58050 		add	r0, sp, #4096
 514 01a8 1830     		adds	r0, r0, #24
 515 01aa FFF7FEFF 		bl	strlen
 516              	.LVL41:
ARM GAS  /tmp/cccFkktC.s 			page 26


 467:Core/Src/main.c ****         return;
 517              		.loc 1 467 9 view .LVU128
 518 01ae 4FF0FF33 		mov	r3, #-1
 519 01b2 82B2     		uxth	r2, r0
 520 01b4 0DF58051 		add	r1, sp, #4096
 521 01b8 1831     		adds	r1, r1, #24
 522 01ba 4048     		ldr	r0, .L40+24
 523 01bc FFF7FEFF 		bl	HAL_UART_Transmit
 524              	.LVL42:
 468:Core/Src/main.c ****     }
 525              		.loc 1 468 9 is_stmt 1 view .LVU129
 526 01c0 6DE0     		b	.L9
 527              	.LVL43:
 528              	.L39:
 468:Core/Src/main.c ****     }
 529              		.loc 1 468 9 is_stmt 0 view .LVU130
 530              	.LBE23:
 477:Core/Src/main.c **** 
 531              		.loc 1 477 5 is_stmt 1 view .LVU131
 477:Core/Src/main.c **** 
 532              		.loc 1 477 52 is_stmt 0 view .LVU132
 533 01c2 07EE901A 		vmov	s15, r1	@ int
 534 01c6 F8EE677A 		vcvt.f32.u32	s15, s15
 477:Core/Src/main.c **** 
 535              		.loc 1 477 15 view .LVU133
 536 01ca C7EE276A 		vdiv.f32	s13, s14, s15
 537              	.LVL44:
 480:Core/Src/main.c **** 
 538              		.loc 1 480 5 is_stmt 1 view .LVU134
 480:Core/Src/main.c **** 
 539              		.loc 1 480 15 is_stmt 0 view .LVU135
 540 01ce 9FED3D7A 		vldr.32	s14, .L40+32
 541              	.LVL45:
 480:Core/Src/main.c **** 
 542              		.loc 1 480 15 view .LVU136
 543 01d2 C7EE267A 		vdiv.f32	s15, s14, s13
 544              	.LVL46:
 487:Core/Src/main.c ****     static uint32_t frequencyIndex = 0;
 545              		.loc 1 487 5 is_stmt 1 view .LVU137
 488:Core/Src/main.c **** 
 546              		.loc 1 488 5 view .LVU138
 491:Core/Src/main.c ****     frequencyIndex = (frequencyIndex + 1) % FREQ_BUFFER_SIZE; // Wrap around after reaching buffer 
 547              		.loc 1 491 5 view .LVU139
 491:Core/Src/main.c ****     frequencyIndex = (frequencyIndex + 1) % FREQ_BUFFER_SIZE; // Wrap around after reaching buffer 
 548              		.loc 1 491 20 is_stmt 0 view .LVU140
 549 01d6 3C4A     		ldr	r2, .L40+36
 550 01d8 1368     		ldr	r3, [r2]
 551              	.LVL47:
 491:Core/Src/main.c ****     frequencyIndex = (frequencyIndex + 1) % FREQ_BUFFER_SIZE; // Wrap around after reaching buffer 
 552              		.loc 1 491 37 view .LVU141
 553 01da 3C48     		ldr	r0, .L40+40
 554 01dc 00EB8301 		add	r1, r0, r3, lsl #2
 555              	.LVL48:
 491:Core/Src/main.c ****     frequencyIndex = (frequencyIndex + 1) % FREQ_BUFFER_SIZE; // Wrap around after reaching buffer 
 556              		.loc 1 491 37 view .LVU142
 557 01e0 C1ED007A 		vstr.32	s15, [r1]
 492:Core/Src/main.c **** 
ARM GAS  /tmp/cccFkktC.s 			page 27


 558              		.loc 1 492 5 is_stmt 1 view .LVU143
 492:Core/Src/main.c **** 
 559              		.loc 1 492 38 is_stmt 0 view .LVU144
 560 01e4 0133     		adds	r3, r3, #1
 492:Core/Src/main.c **** 
 561              		.loc 1 492 43 view .LVU145
 562 01e6 03F00303 		and	r3, r3, #3
 492:Core/Src/main.c **** 
 563              		.loc 1 492 20 view .LVU146
 564 01ea 1360     		str	r3, [r2]
 495:Core/Src/main.c ****     arm_mean_f32(frequencyBuffer, FREQ_BUFFER_SIZE, &meanFrequency);
 565              		.loc 1 495 5 is_stmt 1 view .LVU147
 495:Core/Src/main.c ****     arm_mean_f32(frequencyBuffer, FREQ_BUFFER_SIZE, &meanFrequency);
 566              		.loc 1 495 15 is_stmt 0 view .LVU148
 567 01ec 0023     		movs	r3, #0
 568 01ee 0593     		str	r3, [sp, #20]	@ float
 496:Core/Src/main.c **** 
 569              		.loc 1 496 5 is_stmt 1 view .LVU149
 570 01f0 05AA     		add	r2, sp, #20
 571 01f2 0421     		movs	r1, #4
 572 01f4 FFF7FEFF 		bl	arm_mean_f32
 573              	.LVL49:
 499:Core/Src/main.c ****     HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 574              		.loc 1 499 5 view .LVU150
 575 01f8 0598     		ldr	r0, [sp, #20]	@ float
 576 01fa FFF7FEFF 		bl	__aeabi_f2d
 577              	.LVL50:
 578 01fe CDE90001 		strd	r0, [sp]
 579 0202 334A     		ldr	r2, .L40+44
 580 0204 6421     		movs	r1, #100
 581 0206 0DF58050 		add	r0, sp, #4096
 582 020a 1830     		adds	r0, r0, #24
 583 020c FFF7FEFF 		bl	snprintf
 584              	.LVL51:
 500:Core/Src/main.c **** 
 585              		.loc 1 500 5 view .LVU151
 500:Core/Src/main.c **** 
 586              		.loc 1 500 47 is_stmt 0 view .LVU152
 587 0210 0DF58050 		add	r0, sp, #4096
 588 0214 1830     		adds	r0, r0, #24
 589 0216 FFF7FEFF 		bl	strlen
 590              	.LVL52:
 500:Core/Src/main.c **** 
 591              		.loc 1 500 5 view .LVU153
 592 021a 284C     		ldr	r4, .L40+24
 593 021c 4FF0FF33 		mov	r3, #-1
 594 0220 82B2     		uxth	r2, r0
 595 0222 0DF58051 		add	r1, sp, #4096
 596 0226 1831     		adds	r1, r1, #24
 597 0228 2046     		mov	r0, r4
 598 022a FFF7FEFF 		bl	HAL_UART_Transmit
 599              	.LVL53:
 503:Core/Src/main.c **** 
 600              		.loc 1 503 5 is_stmt 1 view .LVU154
 601 022e 294E     		ldr	r6, .L40+48
 602 0230 0023     		movs	r3, #0
 603 0232 3246     		mov	r2, r6
ARM GAS  /tmp/cccFkktC.s 			page 28


 604 0234 1D49     		ldr	r1, .L40+8
 605 0236 2848     		ldr	r0, .L40+52
 606 0238 FFF7FEFF 		bl	arm_rfft_fast_f32
 607              	.LVL54:
 506:Core/Src/main.c **** 
 608              		.loc 1 506 5 view .LVU155
 609 023c 274D     		ldr	r5, .L40+56
 610 023e 4FF48062 		mov	r2, #1024
 611 0242 2946     		mov	r1, r5
 612 0244 3046     		mov	r0, r6
 613 0246 FFF7FEFF 		bl	arm_cmplx_mag_f32
 614              	.LVL55:
 509:Core/Src/main.c ****     uint32_t maxIndex;
 615              		.loc 1 509 5 view .LVU156
 510:Core/Src/main.c ****     arm_max_f32(fftMag, BUFFER_SIZE / 2, &maxValue, &maxIndex);
 616              		.loc 1 510 5 view .LVU157
 511:Core/Src/main.c **** 
 617              		.loc 1 511 5 view .LVU158
 618 024a 03AB     		add	r3, sp, #12
 619 024c 04AA     		add	r2, sp, #16
 620 024e 4FF48061 		mov	r1, #1024
 621 0252 2846     		mov	r0, r5
 622 0254 FFF7FEFF 		bl	arm_max_f32
 623              	.LVL56:
 514:Core/Src/main.c **** 
 624              		.loc 1 514 5 view .LVU159
 517:Core/Src/main.c ****     // Send peak frequency over UART
 625              		.loc 1 517 5 view .LVU160
 517:Core/Src/main.c ****     // Send peak frequency over UART
 626              		.loc 1 517 53 is_stmt 0 view .LVU161
 627 0258 DDED037A 		vldr.32	s15, [sp, #12]	@ int
 628 025c F8EE677A 		vcvt.f32.u32	s15, s15
 629              	.LVL57:
 520:Core/Src/main.c ****     HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 630              		.loc 1 520 5 is_stmt 1 view .LVU162
 631 0260 9FED1F7A 		vldr.32	s14, .L40+60
 632 0264 67EE877A 		vmul.f32	s15, s15, s14
 633              	.LVL58:
 520:Core/Src/main.c ****     HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 634              		.loc 1 520 5 is_stmt 0 view .LVU163
 635 0268 17EE900A 		vmov	r0, s15
 636 026c FFF7FEFF 		bl	__aeabi_f2d
 637              	.LVL59:
 520:Core/Src/main.c ****     HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 638              		.loc 1 520 5 view .LVU164
 639 0270 CDE90001 		strd	r0, [sp]
 640 0274 1B4A     		ldr	r2, .L40+64
 641 0276 6421     		movs	r1, #100
 642 0278 0DF58050 		add	r0, sp, #4096
 643 027c 1830     		adds	r0, r0, #24
 644 027e FFF7FEFF 		bl	snprintf
 645              	.LVL60:
 521:Core/Src/main.c **** } 
 646              		.loc 1 521 5 is_stmt 1 view .LVU165
 521:Core/Src/main.c **** } 
 647              		.loc 1 521 47 is_stmt 0 view .LVU166
 648 0282 0DF58050 		add	r0, sp, #4096
ARM GAS  /tmp/cccFkktC.s 			page 29


 649 0286 1830     		adds	r0, r0, #24
 650 0288 FFF7FEFF 		bl	strlen
 651              	.LVL61:
 521:Core/Src/main.c **** } 
 652              		.loc 1 521 5 view .LVU167
 653 028c 4FF0FF33 		mov	r3, #-1
 654 0290 82B2     		uxth	r2, r0
 655 0292 0DF58051 		add	r1, sp, #4096
 656 0296 1831     		adds	r1, r1, #24
 657 0298 2046     		mov	r0, r4
 658 029a FFF7FEFF 		bl	HAL_UART_Transmit
 659              	.LVL62:
 660              	.L9:
 522:Core/Src/main.c **** 
 661              		.loc 1 522 1 view .LVU168
 662 029e 0DF5425D 		add	sp, sp, #12416
 663              	.LCFI7:
 664              		.cfi_def_cfa_offset 16
 665              		@ sp needed
 666 02a2 70BD     		pop	{r4, r5, r6, pc}
 667              	.L41:
 668              		.align	2
 669              	.L40:
 670 02a4 00000000 		.word	adcBuffer
 671 02a8 00000000 		.word	inputF32
 672 02ac 00000000 		.word	outputF32
 673 02b0 00000000 		.word	S
 674 02b4 00000000 		.word	0
 675 02b8 00000000 		.word	.LC0
 676 02bc 00000000 		.word	huart1
 677 02c0 28000000 		.word	.LC1
 678 02c4 0000FA45 		.word	1174011904
 679 02c8 00000000 		.word	frequencyIndex.1
 680 02cc 00000000 		.word	frequencyBuffer.0
 681 02d0 48000000 		.word	.LC2
 682 02d4 00000000 		.word	fftOutput
 683 02d8 00000000 		.word	S_RFFT
 684 02dc 00000000 		.word	fftMag
 685 02e0 00007A40 		.word	1081737216
 686 02e4 64000000 		.word	.LC3
 687              		.cfi_endproc
 688              	.LFE253:
 690              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 691              		.align	1
 692              		.global	HAL_ADC_ConvCpltCallback
 693              		.syntax unified
 694              		.thumb
 695              		.thumb_func
 697              	HAL_ADC_ConvCpltCallback:
 698              	.LVL63:
 699              	.LFB254:
 524:Core/Src/main.c ****   processData();
 700              		.loc 1 524 55 is_stmt 1 view -0
 701              		.cfi_startproc
 702              		@ args = 0, pretend = 0, frame = 0
 703              		@ frame_needed = 0, uses_anonymous_args = 0
 524:Core/Src/main.c ****   processData();
ARM GAS  /tmp/cccFkktC.s 			page 30


 704              		.loc 1 524 55 is_stmt 0 view .LVU170
 705 0000 08B5     		push	{r3, lr}
 706              	.LCFI8:
 707              		.cfi_def_cfa_offset 8
 708              		.cfi_offset 3, -8
 709              		.cfi_offset 14, -4
 525:Core/Src/main.c **** }
 710              		.loc 1 525 3 is_stmt 1 view .LVU171
 711 0002 FFF7FEFF 		bl	processData
 712              	.LVL64:
 526:Core/Src/main.c **** 
 713              		.loc 1 526 1 is_stmt 0 view .LVU172
 714 0006 08BD     		pop	{r3, pc}
 715              		.cfi_endproc
 716              	.LFE254:
 718              		.section	.text.Error_Handler,"ax",%progbits
 719              		.align	1
 720              		.global	Error_Handler
 721              		.syntax unified
 722              		.thumb
 723              		.thumb_func
 725              	Error_Handler:
 726              	.LFB262:
 791:Core/Src/main.c **** 
 792:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 793:Core/Src/main.c **** 
 794:Core/Src/main.c **** /* USER CODE END 4 */
 795:Core/Src/main.c **** 
 796:Core/Src/main.c **** /**
 797:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 798:Core/Src/main.c ****   * @retval None
 799:Core/Src/main.c ****   */
 800:Core/Src/main.c **** void Error_Handler(void)
 801:Core/Src/main.c **** {
 727              		.loc 1 801 1 is_stmt 1 view -0
 728              		.cfi_startproc
 729              		@ Volatile: function does not return.
 730              		@ args = 0, pretend = 0, frame = 0
 731              		@ frame_needed = 0, uses_anonymous_args = 0
 732              		@ link register save eliminated.
 802:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 803:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 804:Core/Src/main.c ****   __disable_irq();
 733              		.loc 1 804 3 view .LVU174
 734              	.LBB24:
 735              	.LBI24:
 736              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
ARM GAS  /tmp/cccFkktC.s 			page 31


  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
ARM GAS  /tmp/cccFkktC.s 			page 32


  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cccFkktC.s 			page 33


 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
ARM GAS  /tmp/cccFkktC.s 			page 34


 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
ARM GAS  /tmp/cccFkktC.s 			page 35


 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
ARM GAS  /tmp/cccFkktC.s 			page 36


 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
ARM GAS  /tmp/cccFkktC.s 			page 37


 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
ARM GAS  /tmp/cccFkktC.s 			page 38


 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
ARM GAS  /tmp/cccFkktC.s 			page 39


 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
ARM GAS  /tmp/cccFkktC.s 			page 40


 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
ARM GAS  /tmp/cccFkktC.s 			page 41


 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
ARM GAS  /tmp/cccFkktC.s 			page 42


 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cccFkktC.s 			page 43


 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
ARM GAS  /tmp/cccFkktC.s 			page 44


 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cccFkktC.s 			page 45


 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cccFkktC.s 			page 46


 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
ARM GAS  /tmp/cccFkktC.s 			page 47


 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 737              		.loc 2 960 27 view .LVU175
 738              	.LBB25:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 739              		.loc 2 962 3 view .LVU176
 740              		.syntax unified
 741              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 742 0000 72B6     		cpsid i
 743              	@ 0 "" 2
 744              		.thumb
 745              		.syntax unified
 746              	.L45:
 747              	.LBE25:
 748              	.LBE24:
 805:Core/Src/main.c ****   while (1)
 749              		.loc 1 805 3 discriminator 1 view .LVU177
 806:Core/Src/main.c ****   {
 807:Core/Src/main.c ****   }
 750              		.loc 1 807 3 discriminator 1 view .LVU178
ARM GAS  /tmp/cccFkktC.s 			page 48


 805:Core/Src/main.c ****   while (1)
 751              		.loc 1 805 9 discriminator 1 view .LVU179
 752 0002 FEE7     		b	.L45
 753              		.cfi_endproc
 754              	.LFE262:
 756              		.section	.text.MX_ADC1_Init,"ax",%progbits
 757              		.align	1
 758              		.syntax unified
 759              		.thumb
 760              		.thumb_func
 762              	MX_ADC1_Init:
 763              	.LFB257:
 633:Core/Src/main.c **** 
 764              		.loc 1 633 1 view -0
 765              		.cfi_startproc
 766              		@ args = 0, pretend = 0, frame = 16
 767              		@ frame_needed = 0, uses_anonymous_args = 0
 768 0000 00B5     		push	{lr}
 769              	.LCFI9:
 770              		.cfi_def_cfa_offset 4
 771              		.cfi_offset 14, -4
 772 0002 85B0     		sub	sp, sp, #20
 773              	.LCFI10:
 774              		.cfi_def_cfa_offset 24
 639:Core/Src/main.c **** 
 775              		.loc 1 639 3 view .LVU181
 639:Core/Src/main.c **** 
 776              		.loc 1 639 26 is_stmt 0 view .LVU182
 777 0004 0023     		movs	r3, #0
 778 0006 0093     		str	r3, [sp]
 779 0008 0193     		str	r3, [sp, #4]
 780 000a 0293     		str	r3, [sp, #8]
 781 000c 0393     		str	r3, [sp, #12]
 647:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 782              		.loc 1 647 3 is_stmt 1 view .LVU183
 647:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 783              		.loc 1 647 18 is_stmt 0 view .LVU184
 784 000e 1648     		ldr	r0, .L52
 785 0010 164A     		ldr	r2, .L52+4
 786 0012 0260     		str	r2, [r0]
 648:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 787              		.loc 1 648 3 is_stmt 1 view .LVU185
 648:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 788              		.loc 1 648 29 is_stmt 0 view .LVU186
 789 0014 4FF48032 		mov	r2, #65536
 790 0018 4260     		str	r2, [r0, #4]
 649:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 791              		.loc 1 649 3 is_stmt 1 view .LVU187
 649:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 792              		.loc 1 649 25 is_stmt 0 view .LVU188
 793 001a 8360     		str	r3, [r0, #8]
 650:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 794              		.loc 1 650 3 is_stmt 1 view .LVU189
 650:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 795              		.loc 1 650 27 is_stmt 0 view .LVU190
 796 001c 0361     		str	r3, [r0, #16]
 651:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
ARM GAS  /tmp/cccFkktC.s 			page 49


 797              		.loc 1 651 3 is_stmt 1 view .LVU191
 651:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 798              		.loc 1 651 33 is_stmt 0 view .LVU192
 799 001e 0376     		strb	r3, [r0, #24]
 652:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800              		.loc 1 652 3 is_stmt 1 view .LVU193
 652:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 801              		.loc 1 652 36 is_stmt 0 view .LVU194
 802 0020 80F82030 		strb	r3, [r0, #32]
 653:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 803              		.loc 1 653 3 is_stmt 1 view .LVU195
 653:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 804              		.loc 1 653 35 is_stmt 0 view .LVU196
 805 0024 4FF08052 		mov	r2, #268435456
 806 0028 C262     		str	r2, [r0, #44]
 654:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 807              		.loc 1 654 3 is_stmt 1 view .LVU197
 654:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 808              		.loc 1 654 31 is_stmt 0 view .LVU198
 809 002a 4FF0C062 		mov	r2, #100663296
 810 002e 8262     		str	r2, [r0, #40]
 655:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 811              		.loc 1 655 3 is_stmt 1 view .LVU199
 655:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 812              		.loc 1 655 24 is_stmt 0 view .LVU200
 813 0030 C360     		str	r3, [r0, #12]
 656:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 814              		.loc 1 656 3 is_stmt 1 view .LVU201
 656:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 815              		.loc 1 656 30 is_stmt 0 view .LVU202
 816 0032 0123     		movs	r3, #1
 817 0034 C361     		str	r3, [r0, #28]
 657:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 818              		.loc 1 657 3 is_stmt 1 view .LVU203
 657:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 819              		.loc 1 657 36 is_stmt 0 view .LVU204
 820 0036 80F83030 		strb	r3, [r0, #48]
 658:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 821              		.loc 1 658 3 is_stmt 1 view .LVU205
 658:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 822              		.loc 1 658 27 is_stmt 0 view .LVU206
 823 003a 4361     		str	r3, [r0, #20]
 659:Core/Src/main.c ****   {
 824              		.loc 1 659 3 is_stmt 1 view .LVU207
 659:Core/Src/main.c ****   {
 825              		.loc 1 659 7 is_stmt 0 view .LVU208
 826 003c FFF7FEFF 		bl	HAL_ADC_Init
 827              	.LVL65:
 659:Core/Src/main.c ****   {
 828              		.loc 1 659 6 view .LVU209
 829 0040 68B9     		cbnz	r0, .L50
 666:Core/Src/main.c ****   sConfig.Rank = 1;
 830              		.loc 1 666 3 is_stmt 1 view .LVU210
 666:Core/Src/main.c ****   sConfig.Rank = 1;
 831              		.loc 1 666 19 is_stmt 0 view .LVU211
 832 0042 0823     		movs	r3, #8
 833 0044 0093     		str	r3, [sp]
ARM GAS  /tmp/cccFkktC.s 			page 50


 667:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 834              		.loc 1 667 3 is_stmt 1 view .LVU212
 667:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 835              		.loc 1 667 16 is_stmt 0 view .LVU213
 836 0046 0123     		movs	r3, #1
 837 0048 0193     		str	r3, [sp, #4]
 668:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 838              		.loc 1 668 3 is_stmt 1 view .LVU214
 668:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 839              		.loc 1 668 24 is_stmt 0 view .LVU215
 840 004a 0023     		movs	r3, #0
 841 004c 0293     		str	r3, [sp, #8]
 669:Core/Src/main.c ****   {
 842              		.loc 1 669 3 is_stmt 1 view .LVU216
 669:Core/Src/main.c ****   {
 843              		.loc 1 669 7 is_stmt 0 view .LVU217
 844 004e 6946     		mov	r1, sp
 845 0050 0548     		ldr	r0, .L52
 846 0052 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 847              	.LVL66:
 669:Core/Src/main.c ****   {
 848              		.loc 1 669 6 view .LVU218
 849 0056 20B9     		cbnz	r0, .L51
 677:Core/Src/main.c **** 
 850              		.loc 1 677 1 view .LVU219
 851 0058 05B0     		add	sp, sp, #20
 852              	.LCFI11:
 853              		.cfi_remember_state
 854              		.cfi_def_cfa_offset 4
 855              		@ sp needed
 856 005a 5DF804FB 		ldr	pc, [sp], #4
 857              	.L50:
 858              	.LCFI12:
 859              		.cfi_restore_state
 661:Core/Src/main.c ****   }
 860              		.loc 1 661 5 is_stmt 1 view .LVU220
 861 005e FFF7FEFF 		bl	Error_Handler
 862              	.LVL67:
 863              	.L51:
 671:Core/Src/main.c ****   }
 864              		.loc 1 671 5 view .LVU221
 865 0062 FFF7FEFF 		bl	Error_Handler
 866              	.LVL68:
 867              	.L53:
 868 0066 00BF     		.align	2
 869              	.L52:
 870 0068 00000000 		.word	hadc1
 871 006c 00200140 		.word	1073815552
 872              		.cfi_endproc
 873              	.LFE257:
 875              		.section	.text.MX_TIM2_Init,"ax",%progbits
 876              		.align	1
 877              		.syntax unified
 878              		.thumb
 879              		.thumb_func
 881              	MX_TIM2_Init:
 882              	.LFB258:
ARM GAS  /tmp/cccFkktC.s 			page 51


 685:Core/Src/main.c **** 
 883              		.loc 1 685 1 view -0
 884              		.cfi_startproc
 885              		@ args = 0, pretend = 0, frame = 24
 886              		@ frame_needed = 0, uses_anonymous_args = 0
 887 0000 00B5     		push	{lr}
 888              	.LCFI13:
 889              		.cfi_def_cfa_offset 4
 890              		.cfi_offset 14, -4
 891 0002 87B0     		sub	sp, sp, #28
 892              	.LCFI14:
 893              		.cfi_def_cfa_offset 32
 691:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 894              		.loc 1 691 3 view .LVU223
 691:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 895              		.loc 1 691 26 is_stmt 0 view .LVU224
 896 0004 0023     		movs	r3, #0
 897 0006 0293     		str	r3, [sp, #8]
 898 0008 0393     		str	r3, [sp, #12]
 899 000a 0493     		str	r3, [sp, #16]
 900 000c 0593     		str	r3, [sp, #20]
 692:Core/Src/main.c **** 
 901              		.loc 1 692 3 is_stmt 1 view .LVU225
 692:Core/Src/main.c **** 
 902              		.loc 1 692 27 is_stmt 0 view .LVU226
 903 000e 0093     		str	r3, [sp]
 904 0010 0193     		str	r3, [sp, #4]
 697:Core/Src/main.c ****   htim2.Init.Prescaler = 20-1;
 905              		.loc 1 697 3 is_stmt 1 view .LVU227
 697:Core/Src/main.c ****   htim2.Init.Prescaler = 20-1;
 906              		.loc 1 697 18 is_stmt 0 view .LVU228
 907 0012 1448     		ldr	r0, .L62
 908 0014 4FF08042 		mov	r2, #1073741824
 909 0018 0260     		str	r2, [r0]
 698:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 910              		.loc 1 698 3 is_stmt 1 view .LVU229
 698:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 911              		.loc 1 698 24 is_stmt 0 view .LVU230
 912 001a 1322     		movs	r2, #19
 913 001c 4260     		str	r2, [r0, #4]
 699:Core/Src/main.c ****   htim2.Init.Period = 525-1;
 914              		.loc 1 699 3 is_stmt 1 view .LVU231
 699:Core/Src/main.c ****   htim2.Init.Period = 525-1;
 915              		.loc 1 699 26 is_stmt 0 view .LVU232
 916 001e 8360     		str	r3, [r0, #8]
 700:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 917              		.loc 1 700 3 is_stmt 1 view .LVU233
 700:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 918              		.loc 1 700 21 is_stmt 0 view .LVU234
 919 0020 4FF40372 		mov	r2, #524
 920 0024 C260     		str	r2, [r0, #12]
 701:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 921              		.loc 1 701 3 is_stmt 1 view .LVU235
 701:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 922              		.loc 1 701 28 is_stmt 0 view .LVU236
 923 0026 0361     		str	r3, [r0, #16]
 702:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
ARM GAS  /tmp/cccFkktC.s 			page 52


 924              		.loc 1 702 3 is_stmt 1 view .LVU237
 702:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 925              		.loc 1 702 32 is_stmt 0 view .LVU238
 926 0028 8361     		str	r3, [r0, #24]
 703:Core/Src/main.c ****   {
 927              		.loc 1 703 3 is_stmt 1 view .LVU239
 703:Core/Src/main.c ****   {
 928              		.loc 1 703 7 is_stmt 0 view .LVU240
 929 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 930              	.LVL69:
 703:Core/Src/main.c ****   {
 931              		.loc 1 703 6 view .LVU241
 932 002e 98B9     		cbnz	r0, .L59
 707:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 933              		.loc 1 707 3 is_stmt 1 view .LVU242
 707:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 934              		.loc 1 707 34 is_stmt 0 view .LVU243
 935 0030 4FF48053 		mov	r3, #4096
 936 0034 0293     		str	r3, [sp, #8]
 708:Core/Src/main.c ****   {
 937              		.loc 1 708 3 is_stmt 1 view .LVU244
 708:Core/Src/main.c ****   {
 938              		.loc 1 708 7 is_stmt 0 view .LVU245
 939 0036 02A9     		add	r1, sp, #8
 940 0038 0A48     		ldr	r0, .L62
 941 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 942              	.LVL70:
 708:Core/Src/main.c ****   {
 943              		.loc 1 708 6 view .LVU246
 944 003e 68B9     		cbnz	r0, .L60
 712:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 945              		.loc 1 712 3 is_stmt 1 view .LVU247
 712:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 946              		.loc 1 712 37 is_stmt 0 view .LVU248
 947 0040 2023     		movs	r3, #32
 948 0042 0093     		str	r3, [sp]
 713:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 949              		.loc 1 713 3 is_stmt 1 view .LVU249
 713:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 950              		.loc 1 713 33 is_stmt 0 view .LVU250
 951 0044 0023     		movs	r3, #0
 952 0046 0193     		str	r3, [sp, #4]
 714:Core/Src/main.c ****   {
 953              		.loc 1 714 3 is_stmt 1 view .LVU251
 714:Core/Src/main.c ****   {
 954              		.loc 1 714 7 is_stmt 0 view .LVU252
 955 0048 6946     		mov	r1, sp
 956 004a 0648     		ldr	r0, .L62
 957 004c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 958              	.LVL71:
 714:Core/Src/main.c ****   {
 959              		.loc 1 714 6 view .LVU253
 960 0050 30B9     		cbnz	r0, .L61
 722:Core/Src/main.c **** 
 961              		.loc 1 722 1 view .LVU254
 962 0052 07B0     		add	sp, sp, #28
 963              	.LCFI15:
ARM GAS  /tmp/cccFkktC.s 			page 53


 964              		.cfi_remember_state
 965              		.cfi_def_cfa_offset 4
 966              		@ sp needed
 967 0054 5DF804FB 		ldr	pc, [sp], #4
 968              	.L59:
 969              	.LCFI16:
 970              		.cfi_restore_state
 705:Core/Src/main.c ****   }
 971              		.loc 1 705 5 is_stmt 1 view .LVU255
 972 0058 FFF7FEFF 		bl	Error_Handler
 973              	.LVL72:
 974              	.L60:
 710:Core/Src/main.c ****   }
 975              		.loc 1 710 5 view .LVU256
 976 005c FFF7FEFF 		bl	Error_Handler
 977              	.LVL73:
 978              	.L61:
 716:Core/Src/main.c ****   }
 979              		.loc 1 716 5 view .LVU257
 980 0060 FFF7FEFF 		bl	Error_Handler
 981              	.LVL74:
 982              	.L63:
 983              		.align	2
 984              	.L62:
 985 0064 00000000 		.word	htim2
 986              		.cfi_endproc
 987              	.LFE258:
 989              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 990              		.align	1
 991              		.syntax unified
 992              		.thumb
 993              		.thumb_func
 995              	MX_USART1_UART_Init:
 996              	.LFB259:
 730:Core/Src/main.c **** 
 997              		.loc 1 730 1 view -0
 998              		.cfi_startproc
 999              		@ args = 0, pretend = 0, frame = 0
 1000              		@ frame_needed = 0, uses_anonymous_args = 0
 1001 0000 08B5     		push	{r3, lr}
 1002              	.LCFI17:
 1003              		.cfi_def_cfa_offset 8
 1004              		.cfi_offset 3, -8
 1005              		.cfi_offset 14, -4
 739:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 1006              		.loc 1 739 3 view .LVU259
 739:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 1007              		.loc 1 739 19 is_stmt 0 view .LVU260
 1008 0002 0A48     		ldr	r0, .L68
 1009 0004 0A4B     		ldr	r3, .L68+4
 1010 0006 0360     		str	r3, [r0]
 740:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 1011              		.loc 1 740 3 is_stmt 1 view .LVU261
 740:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 1012              		.loc 1 740 24 is_stmt 0 view .LVU262
 1013 0008 4FF4E133 		mov	r3, #115200
 1014 000c 4360     		str	r3, [r0, #4]
ARM GAS  /tmp/cccFkktC.s 			page 54


 741:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 1015              		.loc 1 741 3 is_stmt 1 view .LVU263
 741:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 1016              		.loc 1 741 26 is_stmt 0 view .LVU264
 1017 000e 0023     		movs	r3, #0
 1018 0010 8360     		str	r3, [r0, #8]
 742:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 1019              		.loc 1 742 3 is_stmt 1 view .LVU265
 742:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 1020              		.loc 1 742 24 is_stmt 0 view .LVU266
 1021 0012 C360     		str	r3, [r0, #12]
 743:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 1022              		.loc 1 743 3 is_stmt 1 view .LVU267
 743:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 1023              		.loc 1 743 22 is_stmt 0 view .LVU268
 1024 0014 0361     		str	r3, [r0, #16]
 744:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1025              		.loc 1 744 3 is_stmt 1 view .LVU269
 744:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1026              		.loc 1 744 20 is_stmt 0 view .LVU270
 1027 0016 0C22     		movs	r2, #12
 1028 0018 4261     		str	r2, [r0, #20]
 745:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 1029              		.loc 1 745 3 is_stmt 1 view .LVU271
 745:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 1030              		.loc 1 745 25 is_stmt 0 view .LVU272
 1031 001a 8361     		str	r3, [r0, #24]
 746:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 1032              		.loc 1 746 3 is_stmt 1 view .LVU273
 746:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 1033              		.loc 1 746 28 is_stmt 0 view .LVU274
 1034 001c C361     		str	r3, [r0, #28]
 747:Core/Src/main.c ****   {
 1035              		.loc 1 747 3 is_stmt 1 view .LVU275
 747:Core/Src/main.c ****   {
 1036              		.loc 1 747 7 is_stmt 0 view .LVU276
 1037 001e FFF7FEFF 		bl	HAL_UART_Init
 1038              	.LVL75:
 747:Core/Src/main.c ****   {
 1039              		.loc 1 747 6 view .LVU277
 1040 0022 00B9     		cbnz	r0, .L67
 755:Core/Src/main.c **** 
 1041              		.loc 1 755 1 view .LVU278
 1042 0024 08BD     		pop	{r3, pc}
 1043              	.L67:
 749:Core/Src/main.c ****   }
 1044              		.loc 1 749 5 is_stmt 1 view .LVU279
 1045 0026 FFF7FEFF 		bl	Error_Handler
 1046              	.LVL76:
 1047              	.L69:
 1048 002a 00BF     		.align	2
 1049              	.L68:
 1050 002c 00000000 		.word	huart1
 1051 0030 00100140 		.word	1073811456
 1052              		.cfi_endproc
 1053              	.LFE259:
 1055              		.section	.text.SystemClock_Config,"ax",%progbits
ARM GAS  /tmp/cccFkktC.s 			page 55


 1056              		.align	1
 1057              		.global	SystemClock_Config
 1058              		.syntax unified
 1059              		.thumb
 1060              		.thumb_func
 1062              	SystemClock_Config:
 1063              	.LFB256:
 587:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1064              		.loc 1 587 1 view -0
 1065              		.cfi_startproc
 1066              		@ args = 0, pretend = 0, frame = 80
 1067              		@ frame_needed = 0, uses_anonymous_args = 0
 1068 0000 00B5     		push	{lr}
 1069              	.LCFI18:
 1070              		.cfi_def_cfa_offset 4
 1071              		.cfi_offset 14, -4
 1072 0002 95B0     		sub	sp, sp, #84
 1073              	.LCFI19:
 1074              		.cfi_def_cfa_offset 88
 588:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1075              		.loc 1 588 3 view .LVU281
 588:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1076              		.loc 1 588 22 is_stmt 0 view .LVU282
 1077 0004 3022     		movs	r2, #48
 1078 0006 0021     		movs	r1, #0
 1079 0008 08A8     		add	r0, sp, #32
 1080 000a FFF7FEFF 		bl	memset
 1081              	.LVL77:
 589:Core/Src/main.c **** 
 1082              		.loc 1 589 3 is_stmt 1 view .LVU283
 589:Core/Src/main.c **** 
 1083              		.loc 1 589 22 is_stmt 0 view .LVU284
 1084 000e 0023     		movs	r3, #0
 1085 0010 0393     		str	r3, [sp, #12]
 1086 0012 0493     		str	r3, [sp, #16]
 1087 0014 0593     		str	r3, [sp, #20]
 1088 0016 0693     		str	r3, [sp, #24]
 1089 0018 0793     		str	r3, [sp, #28]
 593:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 1090              		.loc 1 593 3 is_stmt 1 view .LVU285
 1091              	.LBB26:
 593:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 1092              		.loc 1 593 3 view .LVU286
 1093 001a 0193     		str	r3, [sp, #4]
 593:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 1094              		.loc 1 593 3 view .LVU287
 1095 001c 204A     		ldr	r2, .L76
 1096 001e 116C     		ldr	r1, [r2, #64]
 1097 0020 41F08051 		orr	r1, r1, #268435456
 1098 0024 1164     		str	r1, [r2, #64]
 593:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 1099              		.loc 1 593 3 view .LVU288
 1100 0026 126C     		ldr	r2, [r2, #64]
 1101 0028 02F08052 		and	r2, r2, #268435456
 1102 002c 0192     		str	r2, [sp, #4]
 593:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 1103              		.loc 1 593 3 view .LVU289
ARM GAS  /tmp/cccFkktC.s 			page 56


 1104 002e 019A     		ldr	r2, [sp, #4]
 1105              	.LBE26:
 593:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 1106              		.loc 1 593 3 view .LVU290
 594:Core/Src/main.c **** 
 1107              		.loc 1 594 3 view .LVU291
 1108              	.LBB27:
 594:Core/Src/main.c **** 
 1109              		.loc 1 594 3 view .LVU292
 1110 0030 0293     		str	r3, [sp, #8]
 594:Core/Src/main.c **** 
 1111              		.loc 1 594 3 view .LVU293
 1112 0032 1C4A     		ldr	r2, .L76+4
 1113 0034 1368     		ldr	r3, [r2]
 1114 0036 23F44043 		bic	r3, r3, #49152
 1115 003a 43F40043 		orr	r3, r3, #32768
 1116 003e 1360     		str	r3, [r2]
 594:Core/Src/main.c **** 
 1117              		.loc 1 594 3 view .LVU294
 1118 0040 1368     		ldr	r3, [r2]
 1119 0042 03F44043 		and	r3, r3, #49152
 1120 0046 0293     		str	r3, [sp, #8]
 594:Core/Src/main.c **** 
 1121              		.loc 1 594 3 view .LVU295
 1122 0048 029B     		ldr	r3, [sp, #8]
 1123              	.LBE27:
 594:Core/Src/main.c **** 
 1124              		.loc 1 594 3 view .LVU296
 599:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1125              		.loc 1 599 3 view .LVU297
 599:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1126              		.loc 1 599 36 is_stmt 0 view .LVU298
 1127 004a 0123     		movs	r3, #1
 1128 004c 0893     		str	r3, [sp, #32]
 600:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1129              		.loc 1 600 3 is_stmt 1 view .LVU299
 600:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1130              		.loc 1 600 30 is_stmt 0 view .LVU300
 1131 004e 4FF48033 		mov	r3, #65536
 1132 0052 0993     		str	r3, [sp, #36]
 601:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1133              		.loc 1 601 3 is_stmt 1 view .LVU301
 601:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1134              		.loc 1 601 34 is_stmt 0 view .LVU302
 1135 0054 0223     		movs	r3, #2
 1136 0056 0E93     		str	r3, [sp, #56]
 602:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 25;
 1137              		.loc 1 602 3 is_stmt 1 view .LVU303
 602:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 25;
 1138              		.loc 1 602 35 is_stmt 0 view .LVU304
 1139 0058 4FF48002 		mov	r2, #4194304
 1140 005c 0F92     		str	r2, [sp, #60]
 603:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 1141              		.loc 1 603 3 is_stmt 1 view .LVU305
 603:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 1142              		.loc 1 603 30 is_stmt 0 view .LVU306
 1143 005e 1922     		movs	r2, #25
ARM GAS  /tmp/cccFkktC.s 			page 57


 1144 0060 1092     		str	r2, [sp, #64]
 604:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1145              		.loc 1 604 3 is_stmt 1 view .LVU307
 604:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1146              		.loc 1 604 30 is_stmt 0 view .LVU308
 1147 0062 A822     		movs	r2, #168
 1148 0064 1192     		str	r2, [sp, #68]
 605:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1149              		.loc 1 605 3 is_stmt 1 view .LVU309
 605:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1150              		.loc 1 605 30 is_stmt 0 view .LVU310
 1151 0066 1293     		str	r3, [sp, #72]
 606:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1152              		.loc 1 606 3 is_stmt 1 view .LVU311
 606:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1153              		.loc 1 606 30 is_stmt 0 view .LVU312
 1154 0068 0423     		movs	r3, #4
 1155 006a 1393     		str	r3, [sp, #76]
 607:Core/Src/main.c ****   {
 1156              		.loc 1 607 3 is_stmt 1 view .LVU313
 607:Core/Src/main.c ****   {
 1157              		.loc 1 607 7 is_stmt 0 view .LVU314
 1158 006c 08A8     		add	r0, sp, #32
 1159 006e FFF7FEFF 		bl	HAL_RCC_OscConfig
 1160              	.LVL78:
 607:Core/Src/main.c ****   {
 1161              		.loc 1 607 6 view .LVU315
 1162 0072 80B9     		cbnz	r0, .L74
 614:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1163              		.loc 1 614 3 is_stmt 1 view .LVU316
 614:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1164              		.loc 1 614 31 is_stmt 0 view .LVU317
 1165 0074 0F23     		movs	r3, #15
 1166 0076 0393     		str	r3, [sp, #12]
 616:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1167              		.loc 1 616 3 is_stmt 1 view .LVU318
 616:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1168              		.loc 1 616 34 is_stmt 0 view .LVU319
 1169 0078 0221     		movs	r1, #2
 1170 007a 0491     		str	r1, [sp, #16]
 617:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1171              		.loc 1 617 3 is_stmt 1 view .LVU320
 617:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1172              		.loc 1 617 35 is_stmt 0 view .LVU321
 1173 007c 0023     		movs	r3, #0
 1174 007e 0593     		str	r3, [sp, #20]
 618:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1175              		.loc 1 618 3 is_stmt 1 view .LVU322
 618:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1176              		.loc 1 618 36 is_stmt 0 view .LVU323
 1177 0080 4FF48052 		mov	r2, #4096
 1178 0084 0692     		str	r2, [sp, #24]
 619:Core/Src/main.c **** 
 1179              		.loc 1 619 3 is_stmt 1 view .LVU324
 619:Core/Src/main.c **** 
 1180              		.loc 1 619 36 is_stmt 0 view .LVU325
 1181 0086 0793     		str	r3, [sp, #28]
ARM GAS  /tmp/cccFkktC.s 			page 58


 621:Core/Src/main.c ****   {
 1182              		.loc 1 621 3 is_stmt 1 view .LVU326
 621:Core/Src/main.c ****   {
 1183              		.loc 1 621 7 is_stmt 0 view .LVU327
 1184 0088 03A8     		add	r0, sp, #12
 1185 008a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1186              	.LVL79:
 621:Core/Src/main.c ****   {
 1187              		.loc 1 621 6 view .LVU328
 1188 008e 20B9     		cbnz	r0, .L75
 625:Core/Src/main.c **** 
 1189              		.loc 1 625 1 view .LVU329
 1190 0090 15B0     		add	sp, sp, #84
 1191              	.LCFI20:
 1192              		.cfi_remember_state
 1193              		.cfi_def_cfa_offset 4
 1194              		@ sp needed
 1195 0092 5DF804FB 		ldr	pc, [sp], #4
 1196              	.L74:
 1197              	.LCFI21:
 1198              		.cfi_restore_state
 609:Core/Src/main.c ****   }
 1199              		.loc 1 609 5 is_stmt 1 view .LVU330
 1200 0096 FFF7FEFF 		bl	Error_Handler
 1201              	.LVL80:
 1202              	.L75:
 623:Core/Src/main.c ****   }
 1203              		.loc 1 623 5 view .LVU331
 1204 009a FFF7FEFF 		bl	Error_Handler
 1205              	.LVL81:
 1206              	.L77:
 1207 009e 00BF     		.align	2
 1208              	.L76:
 1209 00a0 00380240 		.word	1073887232
 1210 00a4 00700040 		.word	1073770496
 1211              		.cfi_endproc
 1212              	.LFE256:
 1214              		.section	.text.main,"ax",%progbits
 1215              		.align	1
 1216              		.global	main
 1217              		.syntax unified
 1218              		.thumb
 1219              		.thumb_func
 1221              	main:
 1222              	.LFB255:
 535:Core/Src/main.c **** 
 1223              		.loc 1 535 1 view -0
 1224              		.cfi_startproc
 1225              		@ Volatile: function does not return.
 1226              		@ args = 0, pretend = 0, frame = 0
 1227              		@ frame_needed = 0, uses_anonymous_args = 0
 1228 0000 00B5     		push	{lr}
 1229              	.LCFI22:
 1230              		.cfi_def_cfa_offset 4
 1231              		.cfi_offset 14, -4
 1232 0002 83B0     		sub	sp, sp, #12
 1233              	.LCFI23:
ARM GAS  /tmp/cccFkktC.s 			page 59


 1234              		.cfi_def_cfa_offset 16
 544:Core/Src/main.c **** 
 1235              		.loc 1 544 3 view .LVU333
 1236 0004 FFF7FEFF 		bl	HAL_Init
 1237              	.LVL82:
 551:Core/Src/main.c **** 
 1238              		.loc 1 551 3 view .LVU334
 1239 0008 FFF7FEFF 		bl	SystemClock_Config
 1240              	.LVL83:
 558:Core/Src/main.c ****   MX_DMA_Init();
 1241              		.loc 1 558 3 view .LVU335
 1242 000c FFF7FEFF 		bl	MX_GPIO_Init
 1243              	.LVL84:
 559:Core/Src/main.c ****   MX_ADC1_Init();
 1244              		.loc 1 559 3 view .LVU336
 1245 0010 FFF7FEFF 		bl	MX_DMA_Init
 1246              	.LVL85:
 560:Core/Src/main.c ****   MX_TIM2_Init();
 1247              		.loc 1 560 3 view .LVU337
 1248 0014 FFF7FEFF 		bl	MX_ADC1_Init
 1249              	.LVL86:
 561:Core/Src/main.c ****   MX_USART1_UART_Init();
 1250              		.loc 1 561 3 view .LVU338
 1251 0018 FFF7FEFF 		bl	MX_TIM2_Init
 1252              	.LVL87:
 562:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1253              		.loc 1 562 3 view .LVU339
 1254 001c FFF7FEFF 		bl	MX_USART1_UART_Init
 1255              	.LVL88:
 565:Core/Src/main.c ****   arm_rfft_fast_init_f32(&S_RFFT, BUFFER_SIZE);
 1256              		.loc 1 565 3 view .LVU340
 1257 0020 4FF40064 		mov	r4, #2048
 1258 0024 0094     		str	r4, [sp]
 1259 0026 0A4B     		ldr	r3, .L81
 1260 0028 0A4A     		ldr	r2, .L81+4
 1261 002a 40F23711 		movw	r1, #311
 1262 002e 0A48     		ldr	r0, .L81+8
 1263 0030 FFF7FEFF 		bl	arm_fir_init_f32
 1264              	.LVL89:
 566:Core/Src/main.c ****   HAL_TIM_Base_Start(&htim2);
 1265              		.loc 1 566 3 view .LVU341
 1266 0034 2146     		mov	r1, r4
 1267 0036 0948     		ldr	r0, .L81+12
 1268 0038 FFF7FEFF 		bl	arm_rfft_fast_init_f32
 1269              	.LVL90:
 567:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, BUFFER_SIZE);
 1270              		.loc 1 567 3 view .LVU342
 1271 003c 0848     		ldr	r0, .L81+16
 1272 003e FFF7FEFF 		bl	HAL_TIM_Base_Start
 1273              	.LVL91:
 568:Core/Src/main.c ****   /* USER CODE END 2 */
 1274              		.loc 1 568 3 view .LVU343
 1275 0042 2246     		mov	r2, r4
 1276 0044 0749     		ldr	r1, .L81+20
 1277 0046 0848     		ldr	r0, .L81+24
 1278 0048 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1279              	.LVL92:
ARM GAS  /tmp/cccFkktC.s 			page 60


 1280              	.L79:
 573:Core/Src/main.c ****   {
 1281              		.loc 1 573 3 discriminator 1 view .LVU344
 578:Core/Src/main.c ****   /* USER CODE END 3 */
 1282              		.loc 1 578 3 discriminator 1 view .LVU345
 573:Core/Src/main.c ****   {
 1283              		.loc 1 573 9 discriminator 1 view .LVU346
 1284 004c FEE7     		b	.L79
 1285              	.L82:
 1286 004e 00BF     		.align	2
 1287              	.L81:
 1288 0050 00000000 		.word	firStateF32
 1289 0054 00000000 		.word	firCoeffs32
 1290 0058 00000000 		.word	S
 1291 005c 00000000 		.word	S_RFFT
 1292 0060 00000000 		.word	htim2
 1293 0064 00000000 		.word	adcBuffer
 1294 0068 00000000 		.word	hadc1
 1295              		.cfi_endproc
 1296              	.LFE255:
 1298              		.section	.bss.frequencyBuffer.0,"aw",%nobits
 1299              		.align	2
 1302              	frequencyBuffer.0:
 1303 0000 00000000 		.space	16
 1303      00000000 
 1303      00000000 
 1303      00000000 
 1304              		.section	.bss.frequencyIndex.1,"aw",%nobits
 1305              		.align	2
 1308              	frequencyIndex.1:
 1309 0000 00000000 		.space	4
 1310              		.global	huart1
 1311              		.section	.bss.huart1,"aw",%nobits
 1312              		.align	2
 1315              	huart1:
 1316 0000 00000000 		.space	120
 1316      00000000 
 1316      00000000 
 1316      00000000 
 1316      00000000 
 1317              		.global	htim2
 1318              		.section	.bss.htim2,"aw",%nobits
 1319              		.align	2
 1322              	htim2:
 1323 0000 00000000 		.space	180
 1323      00000000 
 1323      00000000 
 1323      00000000 
 1323      00000000 
 1324              		.global	hdma_adc1
 1325              		.section	.bss.hdma_adc1,"aw",%nobits
 1326              		.align	2
 1329              	hdma_adc1:
 1330 0000 00000000 		.space	96
 1330      00000000 
 1330      00000000 
 1330      00000000 
ARM GAS  /tmp/cccFkktC.s 			page 61


 1330      00000000 
 1331              		.global	hadc1
 1332              		.section	.bss.hadc1,"aw",%nobits
 1333              		.align	2
 1336              	hadc1:
 1337 0000 00000000 		.space	100
 1337      00000000 
 1337      00000000 
 1337      00000000 
 1337      00000000 
 1338              		.section	.data.firCoeffs32,"aw"
 1339              		.align	2
 1342              	firCoeffs32:
 1343 0000 D5E855B8 		.word	-1202329387
 1344 0004 6AF72BB8 		.word	-1205078166
 1345 0008 FF0502B8 		.word	-1207826945
 1346 000c 2829B0B7 		.word	-1213191896
 1347 0010 A48C38B7 		.word	-1221030748
 1348 0014 00000000 		.word	0
 1349 0018 A48C3837 		.word	926452900
 1350 001c 20F0C037 		.word	935391264
 1351 0020 F7CC1238 		.word	940756215
 1352 0024 DE214538 		.word	944054750
 1353 0028 40DA7F38 		.word	947903040
 1354 002c 73309B38 		.word	949694579
 1355 0030 A48CB838 		.word	951618724
 1356 0034 B401D838 		.word	953680308
 1357 0038 A38FF938 		.word	955879331
 1358 003c C98E0D39 		.word	957189833
 1359 0040 30621F39 		.word	958358064
 1360 0044 98353139 		.word	959526296
 1361 0048 FF084339 		.word	960694527
 1362 004c 45F55639 		.word	962000197
 1363 0050 1BD56939 		.word	963237147
 1364 0054 61C17D39 		.word	964542817
 1365 0058 0B5D8939 		.word	965303563
 1366 005c 2E539339 		.word	965956398
 1367 0060 89CF9D39 		.word	966643593
 1368 0064 ACC5A739 		.word	967296428
 1369 0068 0742B239 		.word	967983623
 1370 006c 2A38BC39 		.word	968636458
 1371 0070 4D2EC639 		.word	969289293
 1372 0074 389ECF39 		.word	969907768
 1373 0078 EC87D839 		.word	970491884
 1374 007c 68EBE039 		.word	971041640
 1375 0080 ACC8E839 		.word	971557036
 1376 0084 B81FF039 		.word	972038072
 1377 0088 556AF639 		.word	972450389
 1378 008c BA2EFC39 		.word	972828346
 1379 0090 3C30003A 		.word	973090876
 1380 0094 FF05023A 		.word	973211135
 1381 0098 53CF023A 		.word	973262675
 1382 009c 6F12033A 		.word	973279855
 1383 00a0 53CF023A 		.word	973262675
 1384 00a4 C77F013A 		.word	973176775
 1385 00a8 D1CDFE39 		.word	973000145
 1386 00ac 3483F839 		.word	972587828
ARM GAS  /tmp/cccFkktC.s 			page 62


 1387 00b0 B81FF039 		.word	972038072
 1388 00b4 9529E639 		.word	971385237
 1389 00b8 5B94D939 		.word	970560603
 1390 00bc 7A6CCB39 		.word	969632890
 1391 00c0 4B1FBA39 		.word	968499019
 1392 00c4 753FA739 		.word	967262069
 1393 00c8 503A9139 		.word	965818960
 1394 00cc 97387239 		.word	963786903
 1395 00d0 D1CA3D39 		.word	960350929
 1396 00d4 6F120339 		.word	956502639
 1397 00d8 9C508838 		.word	948457628
 1398 00dc 00000080 		.word	-2147483648
 1399 00e0 F7CC92B8 		.word	-1198338825
 1400 00e4 B5FE16B9 		.word	-1189675339
 1401 00e8 1BD569B9 		.word	-1184246501
 1402 00ec A06EA0B9 		.word	-1180668256
 1403 00f0 910BCEB9 		.word	-1177678959
 1404 00f4 61C1FDB9 		.word	-1174552223
 1405 00f8 08C817BA 		.word	-1172846584
 1406 00fc B37831BA 		.word	-1171162957
 1407 0100 B2F24BBA 		.word	-1169427790
 1408 0104 E9F266BA 		.word	-1167658263
 1409 0108 395E81BA 		.word	-1165926855
 1410 010c 1A868FBA 		.word	-1164999142
 1411 0110 FBAD9DBA 		.word	-1164071429
 1412 0114 F818ACBA 		.word	-1163126536
 1413 0118 6762BABA 		.word	-1162190233
 1414 011c 64CDC8BA 		.word	-1161245340
 1415 0120 45F5D6BA 		.word	-1160317627
 1416 0124 0ADAE4BA 		.word	-1159407094
 1417 0128 419DF2BA 		.word	-1158505151
 1418 012c 40DAFFBA 		.word	-1157637568
 1419 0130 844806BB 		.word	-1157216124
 1420 0134 CC600CBB 		.word	-1156816692
 1421 0138 312512BB 		.word	-1156438735
 1422 013c EC8417BB 		.word	-1156086548
 1423 0140 376F1CBB 		.word	-1155764425
 1424 0144 4AD320BB 		.word	-1155476662
 1425 0148 25B124BB 		.word	-1155223259
 1426 014c 01F827BB 		.word	-1155008511
 1427 0150 18972ABB 		.word	-1154836712
 1428 0154 A27D2CBB 		.word	-1154712158
 1429 0158 9FAB2DBB 		.word	-1154634849
 1430 015c 82FF2DBB 		.word	-1154613374
 1431 0160 118A2DBB 		.word	-1154643439
 1432 0164 BF292CBB 		.word	-1154733633
 1433 0168 8BDE29BB 		.word	-1154883957
 1434 016c E88626BB 		.word	-1155103000
 1435 0170 9C3322BB 		.word	-1155386468
 1436 0174 E1D31CBB 		.word	-1155738655
 1437 0178 EF5616BB 		.word	-1156163857
 1438 017c C7BC0EBB 		.word	-1156662073
 1439 0180 680506BB 		.word	-1157233304
 1440 0184 8A1EF8BA 		.word	-1158144374
 1441 0188 BBB4E1BA 		.word	-1159613253
 1442 018c 8010C9BA 		.word	-1161228160
 1443 0190 2DCDADBA 		.word	-1163014867
ARM GAS  /tmp/cccFkktC.s 			page 63


 1444 0194 520C90BA 		.word	-1164964782
 1445 0198 DC9B5FBA 		.word	-1168139300
 1446 019c 03241ABA 		.word	-1172691965
 1447 01a0 F9DB9EB9 		.word	-1180771335
 1448 01a4 00000000 		.word	0
 1449 01a8 1CD2A839 		.word	967365148
 1450 01ac 2DCD2D3A 		.word	976080173
 1451 01b0 A1F4853A 		.word	981857441
 1452 01b4 A65EB73A 		.word	985095846
 1453 01b8 1903EB3A 		.word	988480281
 1454 01bc FC70103B 		.word	990933244
 1455 01c0 DB6C2C3B 		.word	992767195
 1456 01c4 6364493B 		.word	994665571
 1457 01c8 9357673B 		.word	996628371
 1458 01cc D21A833B 		.word	998447826
 1459 01d0 E8F6923B 		.word	999487208
 1460 01d4 A837A33B 		.word	1000552360
 1461 01d8 AED4B33B 		.word	1001641134
 1462 01dc 34BDC43B 		.word	1002749236
 1463 01e0 9CF9D53B 		.word	1003878812
 1464 01e4 BD70E73B 		.word	1005023421
 1465 01e8 331AF93B 		.word	1006180915
 1466 01ec CD76053C 		.word	1006991053
 1467 01f0 166D0E3C 		.word	1007578390
 1468 01f4 F46F173C 		.word	1008168948
 1469 01f8 0377203C 		.word	1008760579
 1470 01fc E179293C 		.word	1009351137
 1471 0200 5C74323C 		.word	1009939548
 1472 0204 0F5E3B3C 		.word	1010523663
 1473 0208 FC36443C 		.word	1011103484
 1474 020c 8CF24C3C 		.word	1011675788
 1475 0210 8F8C553C 		.word	1012239503
 1476 0214 D2005E3C 		.word	1012793554
 1477 0218 C042663C 		.word	1013334720
 1478 021c 8A566E3C 		.word	1013864074
 1479 0220 9D2F763C 		.word	1014378397
 1480 0224 93C57D3C 		.word	1014875539
 1481 0228 508E823C 		.word	1015189072
 1482 022c FD11863C 		.word	1015419389
 1483 0230 D26D893C 		.word	1015639506
 1484 0234 CFA18C3C 		.word	1015849423
 1485 0238 8FA58F3C 		.word	1016046991
 1486 023c 2D7B923C 		.word	1016232749
 1487 0240 8E20953C 		.word	1016406158
 1488 0244 698F973C 		.word	1016565609
 1489 0248 EFCB993C 		.word	1016712175
 1490 024c D5CF9B3C 		.word	1016844245
 1491 0250 03999D3C 		.word	1016961283
 1492 0254 91299F3C 		.word	1017063825
 1493 0258 677FA03C 		.word	1017151335
 1494 025c 6C98A13C 		.word	1017223276
 1495 0260 8672A23C 		.word	1017279110
 1496 0264 D00FA33C 		.word	1017319376
 1497 0268 2F6EA33C 		.word	1017343535
 1498 026c A48DA33C 		.word	1017351588
 1499 0270 2F6EA33C 		.word	1017343535
 1500 0274 D00FA33C 		.word	1017319376
ARM GAS  /tmp/cccFkktC.s 			page 64


 1501 0278 8672A23C 		.word	1017279110
 1502 027c 6C98A13C 		.word	1017223276
 1503 0280 677FA03C 		.word	1017151335
 1504 0284 91299F3C 		.word	1017063825
 1505 0288 03999D3C 		.word	1016961283
 1506 028c D5CF9B3C 		.word	1016844245
 1507 0290 EFCB993C 		.word	1016712175
 1508 0294 698F973C 		.word	1016565609
 1509 0298 8E20953C 		.word	1016406158
 1510 029c 2D7B923C 		.word	1016232749
 1511 02a0 8FA58F3C 		.word	1016046991
 1512 02a4 CFA18C3C 		.word	1015849423
 1513 02a8 D26D893C 		.word	1015639506
 1514 02ac FD11863C 		.word	1015419389
 1515 02b0 508E823C 		.word	1015189072
 1516 02b4 93C57D3C 		.word	1014875539
 1517 02b8 9D2F763C 		.word	1014378397
 1518 02bc 8A566E3C 		.word	1013864074
 1519 02c0 C042663C 		.word	1013334720
 1520 02c4 D2005E3C 		.word	1012793554
 1521 02c8 8F8C553C 		.word	1012239503
 1522 02cc 8CF24C3C 		.word	1011675788
 1523 02d0 FC36443C 		.word	1011103484
 1524 02d4 0F5E3B3C 		.word	1010523663
 1525 02d8 5C74323C 		.word	1009939548
 1526 02dc E179293C 		.word	1009351137
 1527 02e0 0377203C 		.word	1008760579
 1528 02e4 F46F173C 		.word	1008168948
 1529 02e8 166D0E3C 		.word	1007578390
 1530 02ec CD76053C 		.word	1006991053
 1531 02f0 331AF93B 		.word	1006180915
 1532 02f4 BD70E73B 		.word	1005023421
 1533 02f8 9CF9D53B 		.word	1003878812
 1534 02fc 34BDC43B 		.word	1002749236
 1535 0300 AED4B33B 		.word	1001641134
 1536 0304 A837A33B 		.word	1000552360
 1537 0308 E8F6923B 		.word	999487208
 1538 030c D21A833B 		.word	998447826
 1539 0310 9357673B 		.word	996628371
 1540 0314 6364493B 		.word	994665571
 1541 0318 DB6C2C3B 		.word	992767195
 1542 031c FC70103B 		.word	990933244
 1543 0320 1903EB3A 		.word	988480281
 1544 0324 A65EB73A 		.word	985095846
 1545 0328 A1F4853A 		.word	981857441
 1546 032c 2DCD2D3A 		.word	976080173
 1547 0330 1CD2A839 		.word	967365148
 1548 0334 00000000 		.word	0
 1549 0338 F9DB9EB9 		.word	-1180771335
 1550 033c 03241ABA 		.word	-1172691965
 1551 0340 DC9B5FBA 		.word	-1168139300
 1552 0344 520C90BA 		.word	-1164964782
 1553 0348 2DCDADBA 		.word	-1163014867
 1554 034c 8010C9BA 		.word	-1161228160
 1555 0350 BBB4E1BA 		.word	-1159613253
 1556 0354 8A1EF8BA 		.word	-1158144374
 1557 0358 680506BB 		.word	-1157233304
ARM GAS  /tmp/cccFkktC.s 			page 65


 1558 035c C7BC0EBB 		.word	-1156662073
 1559 0360 EF5616BB 		.word	-1156163857
 1560 0364 E1D31CBB 		.word	-1155738655
 1561 0368 9C3322BB 		.word	-1155386468
 1562 036c E88626BB 		.word	-1155103000
 1563 0370 8BDE29BB 		.word	-1154883957
 1564 0374 BF292CBB 		.word	-1154733633
 1565 0378 118A2DBB 		.word	-1154643439
 1566 037c 82FF2DBB 		.word	-1154613374
 1567 0380 9FAB2DBB 		.word	-1154634849
 1568 0384 A27D2CBB 		.word	-1154712158
 1569 0388 18972ABB 		.word	-1154836712
 1570 038c 01F827BB 		.word	-1155008511
 1571 0390 25B124BB 		.word	-1155223259
 1572 0394 4AD320BB 		.word	-1155476662
 1573 0398 376F1CBB 		.word	-1155764425
 1574 039c EC8417BB 		.word	-1156086548
 1575 03a0 312512BB 		.word	-1156438735
 1576 03a4 CC600CBB 		.word	-1156816692
 1577 03a8 844806BB 		.word	-1157216124
 1578 03ac 40DAFFBA 		.word	-1157637568
 1579 03b0 419DF2BA 		.word	-1158505151
 1580 03b4 0ADAE4BA 		.word	-1159407094
 1581 03b8 45F5D6BA 		.word	-1160317627
 1582 03bc 64CDC8BA 		.word	-1161245340
 1583 03c0 6762BABA 		.word	-1162190233
 1584 03c4 F818ACBA 		.word	-1163126536
 1585 03c8 FBAD9DBA 		.word	-1164071429
 1586 03cc 1A868FBA 		.word	-1164999142
 1587 03d0 395E81BA 		.word	-1165926855
 1588 03d4 E9F266BA 		.word	-1167658263
 1589 03d8 B2F24BBA 		.word	-1169427790
 1590 03dc B37831BA 		.word	-1171162957
 1591 03e0 08C817BA 		.word	-1172846584
 1592 03e4 61C1FDB9 		.word	-1174552223
 1593 03e8 910BCEB9 		.word	-1177678959
 1594 03ec A06EA0B9 		.word	-1180668256
 1595 03f0 1BD569B9 		.word	-1184246501
 1596 03f4 B5FE16B9 		.word	-1189675339
 1597 03f8 F7CC92B8 		.word	-1198338825
 1598 03fc 00000080 		.word	-2147483648
 1599 0400 9C508838 		.word	948457628
 1600 0404 6F120339 		.word	956502639
 1601 0408 D1CA3D39 		.word	960350929
 1602 040c 97387239 		.word	963786903
 1603 0410 503A9139 		.word	965818960
 1604 0414 753FA739 		.word	967262069
 1605 0418 4B1FBA39 		.word	968499019
 1606 041c 7A6CCB39 		.word	969632890
 1607 0420 5B94D939 		.word	970560603
 1608 0424 9529E639 		.word	971385237
 1609 0428 B81FF039 		.word	972038072
 1610 042c 3483F839 		.word	972587828
 1611 0430 D1CDFE39 		.word	973000145
 1612 0434 C77F013A 		.word	973176775
 1613 0438 53CF023A 		.word	973262675
 1614 043c 6F12033A 		.word	973279855
ARM GAS  /tmp/cccFkktC.s 			page 66


 1615 0440 53CF023A 		.word	973262675
 1616 0444 FF05023A 		.word	973211135
 1617 0448 3C30003A 		.word	973090876
 1618 044c BA2EFC39 		.word	972828346
 1619 0450 556AF639 		.word	972450389
 1620 0454 B81FF039 		.word	972038072
 1621 0458 ACC8E839 		.word	971557036
 1622 045c 68EBE039 		.word	971041640
 1623 0460 EC87D839 		.word	970491884
 1624 0464 389ECF39 		.word	969907768
 1625 0468 4D2EC639 		.word	969289293
 1626 046c 2A38BC39 		.word	968636458
 1627 0470 0742B239 		.word	967983623
 1628 0474 ACC5A739 		.word	967296428
 1629 0478 89CF9D39 		.word	966643593
 1630 047c 2E539339 		.word	965956398
 1631 0480 0B5D8939 		.word	965303563
 1632 0484 61C17D39 		.word	964542817
 1633 0488 1BD56939 		.word	963237147
 1634 048c 45F55639 		.word	962000197
 1635 0490 FF084339 		.word	960694527
 1636 0494 98353139 		.word	959526296
 1637 0498 30621F39 		.word	958358064
 1638 049c C98E0D39 		.word	957189833
 1639 04a0 A38FF938 		.word	955879331
 1640 04a4 B401D838 		.word	953680308
 1641 04a8 A48CB838 		.word	951618724
 1642 04ac 73309B38 		.word	949694579
 1643 04b0 40DA7F38 		.word	947903040
 1644 04b4 DE214538 		.word	944054750
 1645 04b8 F7CC1238 		.word	940756215
 1646 04bc 20F0C037 		.word	935391264
 1647 04c0 A48C3837 		.word	926452900
 1648 04c4 00000000 		.word	0
 1649 04c8 A48C38B7 		.word	-1221030748
 1650 04cc 2829B0B7 		.word	-1213191896
 1651 04d0 FF0502B8 		.word	-1207826945
 1652 04d4 6AF72BB8 		.word	-1205078166
 1653 04d8 D5E855B8 		.word	-1202329387
 1654              		.global	S_RFFT
 1655              		.section	.bss.S_RFFT,"aw",%nobits
 1656              		.align	2
 1659              	S_RFFT:
 1660 0000 00000000 		.space	24
 1660      00000000 
 1660      00000000 
 1660      00000000 
 1660      00000000 
 1661              		.global	S
 1662              		.section	.bss.S,"aw",%nobits
 1663              		.align	2
 1666              	S:
 1667 0000 00000000 		.space	12
 1667      00000000 
 1667      00000000 
 1668              		.section	.bss.fftMag,"aw",%nobits
 1669              		.align	2
ARM GAS  /tmp/cccFkktC.s 			page 67


 1672              	fftMag:
 1673 0000 00000000 		.space	4096
 1673      00000000 
 1673      00000000 
 1673      00000000 
 1673      00000000 
 1674              		.section	.bss.fftOutput,"aw",%nobits
 1675              		.align	2
 1678              	fftOutput:
 1679 0000 00000000 		.space	8192
 1679      00000000 
 1679      00000000 
 1679      00000000 
 1679      00000000 
 1680              		.section	.bss.firStateF32,"aw",%nobits
 1681              		.align	2
 1684              	firStateF32:
 1685 0000 00000000 		.space	9432
 1685      00000000 
 1685      00000000 
 1685      00000000 
 1685      00000000 
 1686              		.section	.bss.outputF32,"aw",%nobits
 1687              		.align	2
 1690              	outputF32:
 1691 0000 00000000 		.space	8192
 1691      00000000 
 1691      00000000 
 1691      00000000 
 1691      00000000 
 1692              		.section	.bss.inputF32,"aw",%nobits
 1693              		.align	2
 1696              	inputF32:
 1697 0000 00000000 		.space	8192
 1697      00000000 
 1697      00000000 
 1697      00000000 
 1697      00000000 
 1698              		.global	adcBuffer
 1699              		.section	.bss.adcBuffer,"aw",%nobits
 1700              		.align	2
 1703              	adcBuffer:
 1704 0000 00000000 		.space	4096
 1704      00000000 
 1704      00000000 
 1704      00000000 
 1704      00000000 
 1705              		.text
 1706              	.Letext0:
 1707              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xc.h"
 1708              		.file 4 "/nix/store/i3m8xrhhnb7l83cpwdd9rlkcglpnxkw8-gcc-arm-embedded-12.3.rel1/arm-none-eabi/incl
 1709              		.file 5 "/nix/store/i3m8xrhhnb7l83cpwdd9rlkcglpnxkw8-gcc-arm-embedded-12.3.rel1/arm-none-eabi/incl
 1710              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1711              		.file 7 "/nix/store/i3m8xrhhnb7l83cpwdd9rlkcglpnxkw8-gcc-arm-embedded-12.3.rel1/lib/gcc/arm-none-e
 1712              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1713              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1714              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
ARM GAS  /tmp/cccFkktC.s 			page 68


 1715              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1716              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1717              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1718              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1719              		.file 15 "Core/Inc/arm_math.h"
 1720              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1721              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1722              		.file 18 "/nix/store/i3m8xrhhnb7l83cpwdd9rlkcglpnxkw8-gcc-arm-embedded-12.3.rel1/arm-none-eabi/inc
 1723              		.file 19 "<built-in>"
 1724              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/cccFkktC.s 			page 69


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cccFkktC.s:21     .text.MX_GPIO_Init:00000000 $t
     /tmp/cccFkktC.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/cccFkktC.s:95     .text.MX_GPIO_Init:00000048 $d
     /tmp/cccFkktC.s:100    .text.MX_DMA_Init:00000000 $t
     /tmp/cccFkktC.s:105    .text.MX_DMA_Init:00000000 MX_DMA_Init
     /tmp/cccFkktC.s:154    .text.MX_DMA_Init:00000030 $d
     /tmp/cccFkktC.s:159    .rodata.processData.str1.4:00000000 $d
     /tmp/cccFkktC.s:173    .text.processData:00000000 $t
     /tmp/cccFkktC.s:179    .text.processData:00000000 processData
     /tmp/cccFkktC.s:670    .text.processData:000002a4 $d
     /tmp/cccFkktC.s:1703   .bss.adcBuffer:00000000 adcBuffer
     /tmp/cccFkktC.s:1696   .bss.inputF32:00000000 inputF32
     /tmp/cccFkktC.s:1690   .bss.outputF32:00000000 outputF32
     /tmp/cccFkktC.s:1666   .bss.S:00000000 S
     /tmp/cccFkktC.s:1315   .bss.huart1:00000000 huart1
     /tmp/cccFkktC.s:1308   .bss.frequencyIndex.1:00000000 frequencyIndex.1
     /tmp/cccFkktC.s:1302   .bss.frequencyBuffer.0:00000000 frequencyBuffer.0
     /tmp/cccFkktC.s:1678   .bss.fftOutput:00000000 fftOutput
     /tmp/cccFkktC.s:1659   .bss.S_RFFT:00000000 S_RFFT
     /tmp/cccFkktC.s:1672   .bss.fftMag:00000000 fftMag
     /tmp/cccFkktC.s:691    .text.HAL_ADC_ConvCpltCallback:00000000 $t
     /tmp/cccFkktC.s:697    .text.HAL_ADC_ConvCpltCallback:00000000 HAL_ADC_ConvCpltCallback
     /tmp/cccFkktC.s:719    .text.Error_Handler:00000000 $t
     /tmp/cccFkktC.s:725    .text.Error_Handler:00000000 Error_Handler
     /tmp/cccFkktC.s:757    .text.MX_ADC1_Init:00000000 $t
     /tmp/cccFkktC.s:762    .text.MX_ADC1_Init:00000000 MX_ADC1_Init
     /tmp/cccFkktC.s:870    .text.MX_ADC1_Init:00000068 $d
     /tmp/cccFkktC.s:1336   .bss.hadc1:00000000 hadc1
     /tmp/cccFkktC.s:876    .text.MX_TIM2_Init:00000000 $t
     /tmp/cccFkktC.s:881    .text.MX_TIM2_Init:00000000 MX_TIM2_Init
     /tmp/cccFkktC.s:985    .text.MX_TIM2_Init:00000064 $d
     /tmp/cccFkktC.s:1322   .bss.htim2:00000000 htim2
     /tmp/cccFkktC.s:990    .text.MX_USART1_UART_Init:00000000 $t
     /tmp/cccFkktC.s:995    .text.MX_USART1_UART_Init:00000000 MX_USART1_UART_Init
     /tmp/cccFkktC.s:1050   .text.MX_USART1_UART_Init:0000002c $d
     /tmp/cccFkktC.s:1056   .text.SystemClock_Config:00000000 $t
     /tmp/cccFkktC.s:1062   .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/cccFkktC.s:1209   .text.SystemClock_Config:000000a0 $d
     /tmp/cccFkktC.s:1215   .text.main:00000000 $t
     /tmp/cccFkktC.s:1221   .text.main:00000000 main
     /tmp/cccFkktC.s:1288   .text.main:00000050 $d
     /tmp/cccFkktC.s:1684   .bss.firStateF32:00000000 firStateF32
     /tmp/cccFkktC.s:1342   .data.firCoeffs32:00000000 firCoeffs32
     /tmp/cccFkktC.s:1299   .bss.frequencyBuffer.0:00000000 $d
     /tmp/cccFkktC.s:1305   .bss.frequencyIndex.1:00000000 $d
     /tmp/cccFkktC.s:1312   .bss.huart1:00000000 $d
     /tmp/cccFkktC.s:1319   .bss.htim2:00000000 $d
     /tmp/cccFkktC.s:1329   .bss.hdma_adc1:00000000 hdma_adc1
     /tmp/cccFkktC.s:1326   .bss.hdma_adc1:00000000 $d
     /tmp/cccFkktC.s:1333   .bss.hadc1:00000000 $d
     /tmp/cccFkktC.s:1339   .data.firCoeffs32:00000000 $d
     /tmp/cccFkktC.s:1656   .bss.S_RFFT:00000000 $d
     /tmp/cccFkktC.s:1663   .bss.S:00000000 $d
     /tmp/cccFkktC.s:1669   .bss.fftMag:00000000 $d
     /tmp/cccFkktC.s:1675   .bss.fftOutput:00000000 $d
ARM GAS  /tmp/cccFkktC.s 			page 70


     /tmp/cccFkktC.s:1681   .bss.firStateF32:00000000 $d
     /tmp/cccFkktC.s:1687   .bss.outputF32:00000000 $d
     /tmp/cccFkktC.s:1693   .bss.inputF32:00000000 $d
     /tmp/cccFkktC.s:1700   .bss.adcBuffer:00000000 $d

UNDEFINED SYMBOLS
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
__aeabi_f2d
arm_fir_f32
arm_mean_f32
strlen
HAL_UART_Transmit
snprintf
arm_rfft_fast_f32
arm_cmplx_mag_f32
arm_max_f32
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
arm_fir_init_f32
arm_rfft_fast_init_f32
HAL_TIM_Base_Start
HAL_ADC_Start_DMA
