ARM GAS  /tmp/cchg1qP0.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"arm_dot_prod_f32.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c"
  20              		.section	.text.arm_dot_prod_f32,"ax",%progbits
  21              		.align	1
  22              		.global	arm_dot_prod_f32
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	arm_dot_prod_f32:
  28              	.LVL0:
  29              	.LFB120:
   1:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** /* ----------------------------------------------------------------------
   2:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * Project:      CMSIS DSP Library
   3:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * Title:        arm_dot_prod_f32.c
   4:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * Description:  Floating-point dot product
   5:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  *
   6:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * $Date:        05 October 2021
   7:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * $Revision:    V1.9.1
   8:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  *
   9:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * Target Processor: Cortex-M and Cortex-A cores
  10:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * -------------------------------------------------------------------- */
  11:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** /*
  12:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * Copyright (C) 2010-2021 ARM Limited or its affiliates. All rights reserved.
  13:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  *
  14:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  *
  16:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * not use this file except in compliance with the License.
  18:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * You may obtain a copy of the License at
  19:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  *
  20:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  *
  22:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * See the License for the specific language governing permissions and
  26:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  * limitations under the License.
  27:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  */
  28:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  29:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #include "dsp/basic_math_functions.h"
ARM GAS  /tmp/cchg1qP0.s 			page 2


  30:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  31:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** /**
  32:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @ingroup groupMath
  33:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  */
  34:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  35:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** /**
  36:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @defgroup BasicDotProd Vector Dot Product
  37:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  38:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   Computes the dot product of two vectors.
  39:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   The vectors are multiplied element-by-element and then summed.
  40:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  41:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   <pre>
  42:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****       sum = pSrcA[0]*pSrcB[0] + pSrcA[1]*pSrcB[1] + ... + pSrcA[blockSize-1]*pSrcB[blockSize-1]
  43:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   </pre>
  44:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  45:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   There are separate functions for floating-point, Q7, Q15, and Q31 data types.
  46:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  */
  47:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  48:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** /**
  49:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @addtogroup BasicDotProd
  50:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @{
  51:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  */
  52:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  53:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** /**
  54:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @brief         Dot product of floating-point vectors.
  55:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @param[in]     pSrcA      points to the first input vector.
  56:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @param[in]     pSrcB      points to the second input vector.
  57:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @param[in]     blockSize  number of samples in each vector.
  58:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @param[out]    result     output result returned here.
  59:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   @return        none
  60:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****  */
  61:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  62:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  63:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  64:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #include "arm_helium_utils.h"
  65:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  66:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  67:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** void arm_dot_prod_f32(
  68:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     const float32_t * pSrcA,
  69:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     const float32_t * pSrcB,
  70:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     uint32_t    blockSize,
  71:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     float32_t * result)
  72:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** {
  73:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     f32x4_t vecA, vecB;
  74:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     f32x4_t vecSum;
  75:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     uint32_t blkCnt; 
  76:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     float32_t sum = 0.0f;  
  77:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     vecSum = vdupq_n_f32(0.0f);
  78:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  79:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     /* Compute 4 outputs at a time */
  80:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     blkCnt = blockSize >> 2U;
  81:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     while (blkCnt > 0U)
  82:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     {
  83:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         /*
  84:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****          * C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1]
  85:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****          * Calculate dot product and then store the result in a temporary buffer.
  86:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****          * and advance vector source and destination pointers
ARM GAS  /tmp/cchg1qP0.s 			page 3


  87:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****          */
  88:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         vecA = vld1q(pSrcA);
  89:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         pSrcA += 4;
  90:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         
  91:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         vecB = vld1q(pSrcB);
  92:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         pSrcB += 4;
  93:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  94:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         vecSum = vfmaq(vecSum, vecA, vecB);
  95:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         /*
  96:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****          * Decrement the blockSize loop counter
  97:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****          */
  98:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         blkCnt --;
  99:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     }
 100:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 101:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 102:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     blkCnt = blockSize & 3;
 103:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     if (blkCnt > 0U)
 104:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     {
 105:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
 106:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 107:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         mve_pred16_t p0 = vctp32q(blkCnt);
 108:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         vecA = vld1q(pSrcA);
 109:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         vecB = vld1q(pSrcB);
 110:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         vecSum = vfmaq_m(vecSum, vecA, vecB, p0);
 111:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     }
 112:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 113:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     sum = vecAddAcrossF32Mve(vecSum);
 114:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 115:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     /* Store result in destination buffer */
 116:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     *result = sum;
 117:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 118:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** }
 119:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 120:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #else
 121:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 122:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** void arm_dot_prod_f32(
 123:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   const float32_t * pSrcA,
 124:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   const float32_t * pSrcB,
 125:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         uint32_t blockSize,
 126:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         float32_t * result)
 127:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** {
  30              		.loc 1 127 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 128:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         uint32_t blkCnt;                               /* Loop counter */
  35              		.loc 1 128 9 view .LVU1
 129:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         float32_t sum = 0.0f;                          /* Temporary return variable */
  36              		.loc 1 129 9 view .LVU2
 130:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 131:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
 132:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     f32x4_t vec1;
 133:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     f32x4_t vec2;
 134:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     f32x4_t accum = vdupq_n_f32(0);   
 135:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #if !defined(__aarch64__)
 136:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     f32x2_t tmp = vdup_n_f32(0); 
ARM GAS  /tmp/cchg1qP0.s 			page 4


 137:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #endif   
 138:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 139:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     /* Compute 4 outputs at a time */
 140:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     blkCnt = blockSize >> 2U;
 141:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 142:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     vec1 = vld1q_f32(pSrcA);
 143:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     vec2 = vld1q_f32(pSrcB);
 144:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 145:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     while (blkCnt > 0U)
 146:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     {
 147:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         /* C = A[0]*B[0] + A[1]*B[1] + A[2]*B[2] + ... + A[blockSize-1]*B[blockSize-1] */
 148:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         /* Calculate dot product and then store the result in a temporary buffer. */
 149:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         
 150:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 	      accum = vmlaq_f32(accum, vec1, vec2);
 151:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 	
 152:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         /* Increment pointers */
 153:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         pSrcA += 4;
 154:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         pSrcB += 4; 
 155:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 156:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         vec1 = vld1q_f32(pSrcA);
 157:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         vec2 = vld1q_f32(pSrcB);
 158:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         
 159:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         /* Decrement the loop counter */
 160:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****         blkCnt--;
 161:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     }
 162:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     
 163:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #if defined(__aarch64__)
 164:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     sum = vpadds_f32(vpadd_f32(vget_low_f32(accum), vget_high_f32(accum)));
 165:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #else
 166:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     tmp = vpadd_f32(vget_low_f32(accum), vget_high_f32(accum));
 167:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     sum = vget_lane_f32(tmp, 0) + vget_lane_f32(tmp, 1);
 168:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 169:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #endif    
 170:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 171:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     /* Tail */
 172:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     blkCnt = blockSize & 0x3;
 173:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 174:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #else
 175:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
 176:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 177:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   /* Loop unrolling: Compute 4 outputs at a time */
 178:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   blkCnt = blockSize >> 2U;
 179:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 180:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   /* First part of the processing with loop unrolling. Compute 4 outputs at a time.
 181:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
 182:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   while (blkCnt > 0U)
 183:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   {
 184:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
 185:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 186:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     /* Calculate dot product and store result in a temporary buffer. */
 187:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     sum += (*pSrcA++) * (*pSrcB++);
 188:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 189:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     sum += (*pSrcA++) * (*pSrcB++);
 190:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 191:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     sum += (*pSrcA++) * (*pSrcB++);
 192:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 193:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     sum += (*pSrcA++) * (*pSrcB++);
ARM GAS  /tmp/cchg1qP0.s 			page 5


 194:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 195:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     /* Decrement loop counter */
 196:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     blkCnt--;
 197:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   }
 198:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 199:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   /* Loop unrolling: Compute remaining outputs */
 200:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   blkCnt = blockSize % 0x4U;
 201:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 202:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #else
 203:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 204:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   /* Initialize blkCnt with number of samples */
 205:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   blkCnt = blockSize;
  37              		.loc 1 205 3 view .LVU3
 206:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 207:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #endif /* #if defined (ARM_MATH_LOOPUNROLL) */
 208:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** #endif /* #if defined(ARM_MATH_NEON) */
 209:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 210:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   while (blkCnt > 0U)
  38              		.loc 1 210 3 view .LVU4
 129:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
  39              		.loc 1 129 19 is_stmt 0 view .LVU5
  40 0000 9FED087A 		vldr.32	s14, .L4
  41              		.loc 1 210 9 view .LVU6
  42 0004 08E0     		b	.L2
  43              	.LVL1:
  44              	.L3:
 211:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   {
 212:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
 213:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 214:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     /* Calculate dot product and store result in a temporary buffer. */
 215:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     sum += (*pSrcA++) * (*pSrcB++);
  45              		.loc 1 215 5 is_stmt 1 view .LVU7
  46              		.loc 1 215 13 is_stmt 0 view .LVU8
  47 0006 F0EC017A 		vldmia.32	r0!, {s15}
  48              	.LVL2:
  49              		.loc 1 215 26 view .LVU9
  50 000a F1EC016A 		vldmia.32	r1!, {s13}
  51              	.LVL3:
  52              		.loc 1 215 23 view .LVU10
  53 000e 67EEA67A 		vmul.f32	s15, s15, s13
  54              		.loc 1 215 9 view .LVU11
  55 0012 37EE277A 		vadd.f32	s14, s14, s15
  56              	.LVL4:
 216:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
 217:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     /* Decrement loop counter */
 218:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****     blkCnt--;
  57              		.loc 1 218 5 is_stmt 1 view .LVU12
  58              		.loc 1 218 11 is_stmt 0 view .LVU13
  59 0016 013A     		subs	r2, r2, #1
  60              	.LVL5:
  61              	.L2:
 210:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   {
  62              		.loc 1 210 17 is_stmt 1 view .LVU14
  63 0018 002A     		cmp	r2, #0
  64 001a F4D1     		bne	.L3
 219:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   }
 220:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** 
ARM GAS  /tmp/cchg1qP0.s 			page 6


 221:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   /* Store result in destination buffer */
 222:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c ****   *result = sum;
  65              		.loc 1 222 3 view .LVU15
  66              		.loc 1 222 11 is_stmt 0 view .LVU16
  67 001c 83ED007A 		vstr.32	s14, [r3]
 223:Drivers/CMSIS/DSP/Source/BasicMathFunctions/arm_dot_prod_f32.c **** }
  68              		.loc 1 223 1 view .LVU17
  69 0020 7047     		bx	lr
  70              	.L5:
  71 0022 00BF     		.align	2
  72              	.L4:
  73 0024 00000000 		.word	0
  74              		.cfi_endproc
  75              	.LFE120:
  77              		.text
  78              	.Letext0:
  79              		.file 2 "/nix/store/i3m8xrhhnb7l83cpwdd9rlkcglpnxkw8-gcc-arm-embedded-12.3.rel1/arm-none-eabi/incl
  80              		.file 3 "/nix/store/i3m8xrhhnb7l83cpwdd9rlkcglpnxkw8-gcc-arm-embedded-12.3.rel1/arm-none-eabi/incl
  81              		.file 4 "Drivers/CMSIS/DSP/Include/arm_math_types.h"
ARM GAS  /tmp/cchg1qP0.s 			page 7


DEFINED SYMBOLS
                            *ABS*:00000000 arm_dot_prod_f32.c
     /tmp/cchg1qP0.s:21     .text.arm_dot_prod_f32:00000000 $t
     /tmp/cchg1qP0.s:27     .text.arm_dot_prod_f32:00000000 arm_dot_prod_f32
     /tmp/cchg1qP0.s:73     .text.arm_dot_prod_f32:00000024 $d

NO UNDEFINED SYMBOLS
